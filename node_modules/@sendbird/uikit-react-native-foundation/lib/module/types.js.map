{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { ReactElement, ReactNode } from 'react';\nimport type { TextStyle } from 'react-native';\n\nexport interface UIKitTypography {\n  h1: FontAttributes;\n  h2: FontAttributes;\n  subtitle1: FontAttributes;\n  subtitle2: FontAttributes;\n  body1: FontAttributes;\n  body2: FontAttributes;\n  body3: FontAttributes;\n  button: FontAttributes;\n  caption1: FontAttributes;\n  caption2: FontAttributes;\n  caption3: FontAttributes;\n  caption4: FontAttributes;\n}\nexport type TypoName = keyof UIKitTypography;\nexport type FontAttributes = Pick<TextStyle, 'fontFamily' | 'fontSize' | 'lineHeight' | 'letterSpacing' | 'fontWeight'>;\n\nexport type UIKitColorScheme = 'light' | 'dark';\nexport interface UIKitTheme {\n  colorScheme: UIKitColorScheme;\n  select<V>(options: { [key in UIKitColorScheme | 'default']?: V }): V;\n\n  palette: UIKitPalette;\n  colors: UIKitColors;\n\n  typography: UIKitTypography;\n}\n\nexport type Component =\n  | 'Header'\n  | 'Button'\n  | 'Dialog'\n  | 'Input'\n  | 'Badge'\n  | 'Placeholder'\n  | 'Message'\n  | 'DateSeparator'\n  | 'GroupChannelPreview'\n  | 'ProfileCard'\n  | 'Reaction';\n\nexport type GetColorTree<\n  Tree extends {\n    Variant: {\n      [key in Component]: string;\n    };\n    State: {\n      [key in Component]: string;\n    };\n    ColorPart: {\n      [key in Component]: string;\n    };\n  },\n> = Tree;\n\nexport type ComponentColorTree = GetColorTree<{\n  Variant: {\n    Header: 'nav';\n    Button: 'contained' | 'text';\n    Dialog: 'default';\n    Input: 'default' | 'underline';\n    Badge: 'default';\n    Placeholder: 'default';\n    Message: 'incoming' | 'outgoing';\n    DateSeparator: 'default';\n    GroupChannelPreview: 'default';\n    ProfileCard: 'default';\n    Reaction: 'default' | 'rounded';\n  };\n  State: {\n    Header: 'none';\n    Button: 'enabled' | 'pressed' | 'disabled';\n    Dialog: 'none';\n    Input: 'active' | 'disabled';\n    Badge: 'none';\n    Placeholder: 'none';\n    Message: 'enabled' | 'pressed';\n    DateSeparator: 'none';\n    GroupChannelPreview: 'none';\n    ProfileCard: 'none';\n    Reaction: 'enabled' | 'selected';\n  };\n  ColorPart: {\n    Header: 'background' | 'borderBottom';\n    Button: 'background' | 'content';\n    Dialog: 'background' | 'text' | 'message' | 'highlight' | 'destructive';\n    Input: 'text' | 'placeholder' | 'background' | 'highlight';\n    Badge: 'text' | 'background';\n    Placeholder: 'content' | 'highlight';\n    Message: 'textMsg' | 'textEdited' | 'textSenderName' | 'textTime' | 'background';\n    DateSeparator: 'text' | 'background';\n    GroupChannelPreview:\n      | 'textTitle'\n      | 'textTitleCaption'\n      | 'textBody'\n      | 'memberCount'\n      | 'bodyIcon'\n      | 'background'\n      | 'coverBackground'\n      | 'bodyIconBackground'\n      | 'separator';\n    ProfileCard: 'textUsername' | 'textBodyLabel' | 'textBody' | 'background';\n    Reaction: 'background' | 'highlight';\n  };\n}>;\nexport type ComponentColors<T extends Component> = {\n  [key in ComponentColorTree['Variant'][T]]: {\n    [key in ComponentColorTree['State'][T]]: {\n      [key in ComponentColorTree['ColorPart'][T]]: string;\n    };\n  };\n};\n\nexport interface UIKitColors {\n  primary: string;\n  secondary: string;\n  error: string;\n  background: string;\n  text: string;\n  onBackground01: string;\n  onBackground02: string;\n  onBackground03: string;\n  onBackground04: string;\n  onBackgroundReverse01: string;\n  onBackgroundReverse02: string;\n  onBackgroundReverse03: string;\n  onBackgroundReverse04: string;\n  /**\n   * UI Colors has below structure\n   * Component.{Variant}.{State}.{ColorPart}\n   * @example\n   * ```\n   *  const { colors } = useUIKitTheme();\n   *  colors.ui.button.contained.disabled.backgroundColor\n   * ```\n   * */\n  ui: {\n    header: ComponentColors<'Header'>;\n    button: ComponentColors<'Button'>;\n    dialog: ComponentColors<'Dialog'>;\n    input: ComponentColors<'Input'>;\n    badge: ComponentColors<'Badge'>;\n    placeholder: ComponentColors<'Placeholder'>;\n    message: ComponentColors<'Message'>;\n    dateSeparator: ComponentColors<'DateSeparator'>;\n    groupChannelPreview: ComponentColors<'GroupChannelPreview'>;\n    profileCard: ComponentColors<'ProfileCard'>;\n    reaction: ComponentColors<'Reaction'>;\n  };\n}\n\nexport type HeaderElement = string | ReactElement | null;\nexport type HeaderPartProps = {\n  title?: HeaderElement;\n  right?: HeaderElement;\n  left?: HeaderElement;\n  onPressLeft?: (...params: any[]) => any;\n  onPressRight?: (...params: any[]) => any;\n};\nexport type BaseHeaderProps<HeaderParts extends HeaderPartProps = {}, AdditionalProps = {}> = {\n  titleAlign?: 'left' | 'center' | 'right';\n  children?: ReactNode;\n} & HeaderParts &\n  AdditionalProps;\nexport interface UIKitPalette {\n  primary100: string;\n  primary200: string;\n  primary300: string;\n  primary400: string;\n  primary500: string;\n\n  secondary100: string;\n  secondary200: string;\n  secondary300: string;\n  secondary400: string;\n  secondary500: string;\n\n  error100: string;\n  error200: string;\n  error300: string;\n  error400: string;\n  error500: string;\n\n  background50: string;\n  background100: string;\n  background200: string;\n  background300: string;\n  background400: string;\n  background500: string;\n  background600: string;\n  background700: string;\n\n  overlay01: string;\n  overlay02: string;\n\n  information: string;\n  highlight: string;\n  transparent: 'transparent';\n\n  onBackgroundLight01: string;\n  onBackgroundLight02: string;\n  onBackgroundLight03: string;\n  onBackgroundLight04: string;\n\n  onBackgroundDark01: string;\n  onBackgroundDark02: string;\n  onBackgroundDark03: string;\n  onBackgroundDark04: string;\n}\n"],"mappings":""}