/* eslint-disable @typescript-eslint/no-explicit-any */
import { useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react';
const idPool = {};
export const useUniqId = key => {
  return useState(() => {
    if (!idPool[key]) idPool[key] = 1;
    return idPool[key]++;
  })[0];
};
export const useForceUpdate = () => {
  const [, updater] = useState(0);
  return useCallback(() => updater(prev => prev + 1), []);
};
export const useAsyncEffect = (asyncEffect, deps) => {
  useEffect(createAsyncEffectCallback(asyncEffect), deps);
};
export const useAsyncLayoutEffect = (asyncEffect, deps) => {
  useLayoutEffect(createAsyncEffectCallback(asyncEffect), deps);
};
export const useIIFE = callback => {
  return iife(callback);
};

const iife = callback => callback();

const createAsyncEffectCallback = asyncEffect => () => {
  const destructor = iife(asyncEffect);
  return () => {
    if (!destructor) return;

    if (destructor instanceof Promise) {
      iife(async () => {
        const awaitedDestructor = await destructor;
        if (awaitedDestructor) awaitedDestructor();
      });
    } else {
      iife(destructor);
    }
  };
};

export const useIsMountedRef = () => {
  const isMounted = useRef(true);
  useEffect(() => {
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
export const useIsFirstMount = () => {
  const isFirstMount = useRef(true);

  if (isFirstMount.current) {
    isFirstMount.current = false;
    return true;
  }

  return isFirstMount.current;
};
export const useFreshCallback = callback => {
  const ref = useRef(callback);
  ref.current = callback;
  return useCallback(function () {
    return ref.current(...arguments);
  }, []);
};
//# sourceMappingURL=index.js.map