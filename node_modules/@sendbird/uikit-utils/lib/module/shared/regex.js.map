{"version":3,"names":["require","shim","urlRegexStrict","urlRegexRough","phoneRegex","emailRegex","newLineRegex","createMentionTemplateRegex","trigger","RegExp","replaceWithRegex","text","regex","replacer","keyPrefix","matches","matchAll","founds","map","value","start","index","end","length","groups","matchIndex","items","cursor","forEach","restText","pop","head","slice","mid","match","tail","push","replaceUrlAsComponents","originText","strict","imageExtRegex","audioExtRegex","videoExtRegex","getFileType","extOrType","indexOf","type","split","getFileExtension","filePath","idx","lastIndexOf","toLowerCase","normalizeFileName","fileName","extension"],"sources":["regex.ts"],"sourcesContent":["// For iOS 12 backwards compatibility\nrequire('string.prototype.matchall').shim();\n\nexport const urlRegexStrict =\n  /(https?:\\/\\/|www\\.)[-a-zA-Z0-9@:%._+~#=]{1,256}\\.(xn--)?[a-z0-9-]{2,20}\\b([-a-zA-Z0-9@:%_+[\\],.~#?&/=]*[-a-zA-Z0-9@:%_+\\]~#?&/=])*/g;\nexport const urlRegexRough =\n  /(https?:\\/\\/|www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/g;\nexport const phoneRegex = /[+]?[(]?[0-9]{3}[)]?[-\\s.]?[0-9]{3}[-\\s.]?[0-9]{4,7}/;\nexport const emailRegex = /\\S+@\\S+\\.\\S+/;\nexport const newLineRegex = /\\r\\n|\\r|\\n/g;\n\nexport const createMentionTemplateRegex = (trigger: string) => new RegExp(`(${trigger}[{])(.*?)([}])`, 'g');\n\n// const cases = [\n//   {\n//     type: 'urlStrict',\n//     regex: urlRegexStrict,\n//   },\n//   {\n//     type: 'urlRough',\n//     regex: urlRegexStrict,\n//   },\n//   {\n//     type: 'email',\n//     regex: emailRegex,\n//   },\n//   {\n//     type: 'phone',\n//     regex: urlRegexStrict,\n//   },\n// ];\n\nexport const replaceWithRegex = <T>(\n  text: string,\n  regex: RegExp,\n  replacer: (params: {\n    match: string;\n    groups: string[];\n    matchIndex: number | undefined;\n    index: number;\n    keyPrefix: string;\n  }) => T,\n  keyPrefix: string,\n) => {\n  const matches = [...text.matchAll(regex)];\n  const founds = matches.map((value) => {\n    const text = value[0];\n    const start = value.index ?? 0;\n    const end = start + text.length;\n    return { text, start, end, groups: value, matchIndex: value.index };\n  });\n\n  const items: Array<T | string> = [text];\n  let cursor = 0;\n  founds.forEach(({ text, start, end, groups, matchIndex }, index) => {\n    const restText = items.pop() as string;\n    const head = restText.slice(0, start - cursor);\n    const mid = replacer({ match: text, groups, matchIndex, index, keyPrefix });\n    const tail = restText.slice(end - cursor);\n    items.push(head, mid, tail);\n    cursor = end;\n  });\n  return items;\n};\n\nexport const replaceUrlAsComponents = <T>(originText: string, replacer: (url: string) => T, strict?: boolean) => {\n  const matches = [...originText.matchAll(strict ? urlRegexStrict : urlRegexRough)];\n  const founds = matches.map((value) => {\n    const text = value[0];\n    const start = value.index ?? 0;\n    const end = start + text.length;\n    return { text, start, end };\n  });\n\n  const items: Array<string | T> = [originText];\n  let cursor = 0;\n  founds.forEach(({ text, start, end }) => {\n    const restText = items.pop() as string;\n    const head = restText.slice(0, start - cursor);\n    const mid = replacer(text);\n    const tail = restText.slice(end - cursor);\n    items.push(head, mid, tail);\n    cursor = end;\n  });\n  return items;\n};\n\nexport const imageExtRegex = /jpeg|jpg|png|webp|gif/i;\nexport const audioExtRegex = /3gp|aac|aax|act|aiff|flac|gsm|m4a|m4b|m4p|tta|wma|mp3|webm|wav/i;\nexport const videoExtRegex = /mov|vod|mp4|avi/i;\nexport const getFileType = (extOrType: string) => {\n  if (extOrType.indexOf('/') > -1) {\n    const type = extOrType.split('/')[0];\n    if (type === 'video') return 'video';\n    if (type === 'audio') return 'audio';\n    if (type === 'image') return 'image';\n    return 'file';\n  }\n\n  if (extOrType.match(imageExtRegex)) return 'image';\n  if (extOrType.match(audioExtRegex)) return 'audio';\n  if (extOrType.match(videoExtRegex)) return 'video';\n  return 'file';\n};\nexport function getFileExtension(filePath: string) {\n  const idx = filePath.lastIndexOf('.');\n  if (idx === -1) return '';\n  return filePath.slice(idx - filePath.length).toLowerCase();\n}\nexport function normalizeFileName(fileName: string, extension: string) {\n  if (fileName.indexOf(extension) > -1) {\n    return fileName;\n  } else {\n    if (extension.indexOf('.') === 0) {\n      return `${fileName}${extension}`;\n    } else {\n      return `${fileName}.${extension}`;\n    }\n  }\n}\n"],"mappings":"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"}