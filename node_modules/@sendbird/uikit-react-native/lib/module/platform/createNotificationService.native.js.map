{"version":3,"names":["Platform","createNativeNotificationService","messagingModule","permissionModule","module","authorizedStatus","AuthorizationStatus","AUTHORIZED","PROVISIONAL","getAPNSToken","getFCMToken","getToken","hasPushPermission","OS","result","checkNotifications","status","hasPermission","includes","requestPushPermission","requestNotifications","requestPermission","onTokenRefresh","handler","token"],"sources":["createNotificationService.native.ts"],"sourcesContent":["import type RNFBMessaging from '@react-native-firebase/messaging';\nimport { Platform } from 'react-native';\nimport type * as Permissions from 'react-native-permissions';\n\nimport type { NotificationServiceInterface } from './types';\n\nconst createNativeNotificationService = ({\n  messagingModule,\n  permissionModule,\n}: {\n  messagingModule: typeof RNFBMessaging;\n  permissionModule: typeof Permissions;\n}): NotificationServiceInterface => {\n  const module = messagingModule();\n  const authorizedStatus = [\n    messagingModule.AuthorizationStatus.AUTHORIZED,\n    messagingModule.AuthorizationStatus.PROVISIONAL,\n  ];\n  return {\n    getAPNSToken(): Promise<string | null> {\n      return module.getAPNSToken();\n    },\n    getFCMToken(): Promise<string | null> {\n      return module.getToken();\n    },\n    async hasPushPermission(): Promise<boolean> {\n      if (Platform.OS === 'android') {\n        const result = await permissionModule.checkNotifications();\n        return result.status === 'granted';\n      }\n\n      if (Platform.OS === 'ios') {\n        const status = await module.hasPermission();\n        return authorizedStatus.includes(status);\n      }\n\n      return false;\n    },\n    async requestPushPermission(): Promise<boolean> {\n      if (Platform.OS === 'android') {\n        const result = await permissionModule.requestNotifications([]);\n        return result.status === 'granted';\n      }\n\n      if (Platform.OS === 'ios') {\n        const status = await module.requestPermission();\n        return authorizedStatus.includes(status);\n      }\n\n      return false;\n    },\n    onTokenRefresh(handler: (token: string) => void): () => void | undefined {\n      return module.onTokenRefresh((token) => {\n        if (Platform.OS === 'android') handler(token);\n      });\n    },\n  };\n};\n\nexport default createNativeNotificationService;\n"],"mappings":"AACA,SAASA,QAAT,QAAyB,cAAzB;;AAKA,MAAMC,+BAA+B,GAAG,QAMJ;EAAA,IANK;IACvCC,eADuC;IAEvCC;EAFuC,CAML;EAClC,MAAMC,MAAM,GAAGF,eAAe,EAA9B;EACA,MAAMG,gBAAgB,GAAG,CACvBH,eAAe,CAACI,mBAAhB,CAAoCC,UADb,EAEvBL,eAAe,CAACI,mBAAhB,CAAoCE,WAFb,CAAzB;EAIA,OAAO;IACLC,YAAY,GAA2B;MACrC,OAAOL,MAAM,CAACK,YAAP,EAAP;IACD,CAHI;;IAILC,WAAW,GAA2B;MACpC,OAAON,MAAM,CAACO,QAAP,EAAP;IACD,CANI;;IAOL,MAAMC,iBAAN,GAA4C;MAC1C,IAAIZ,QAAQ,CAACa,EAAT,KAAgB,SAApB,EAA+B;QAC7B,MAAMC,MAAM,GAAG,MAAMX,gBAAgB,CAACY,kBAAjB,EAArB;QACA,OAAOD,MAAM,CAACE,MAAP,KAAkB,SAAzB;MACD;;MAED,IAAIhB,QAAQ,CAACa,EAAT,KAAgB,KAApB,EAA2B;QACzB,MAAMG,MAAM,GAAG,MAAMZ,MAAM,CAACa,aAAP,EAArB;QACA,OAAOZ,gBAAgB,CAACa,QAAjB,CAA0BF,MAA1B,CAAP;MACD;;MAED,OAAO,KAAP;IACD,CAnBI;;IAoBL,MAAMG,qBAAN,GAAgD;MAC9C,IAAInB,QAAQ,CAACa,EAAT,KAAgB,SAApB,EAA+B;QAC7B,MAAMC,MAAM,GAAG,MAAMX,gBAAgB,CAACiB,oBAAjB,CAAsC,EAAtC,CAArB;QACA,OAAON,MAAM,CAACE,MAAP,KAAkB,SAAzB;MACD;;MAED,IAAIhB,QAAQ,CAACa,EAAT,KAAgB,KAApB,EAA2B;QACzB,MAAMG,MAAM,GAAG,MAAMZ,MAAM,CAACiB,iBAAP,EAArB;QACA,OAAOhB,gBAAgB,CAACa,QAAjB,CAA0BF,MAA1B,CAAP;MACD;;MAED,OAAO,KAAP;IACD,CAhCI;;IAiCLM,cAAc,CAACC,OAAD,EAA2D;MACvE,OAAOnB,MAAM,CAACkB,cAAP,CAAuBE,KAAD,IAAW;QACtC,IAAIxB,QAAQ,CAACa,EAAT,KAAgB,SAApB,EAA+BU,OAAO,CAACC,KAAD,CAAP;MAChC,CAFM,CAAP;IAGD;;EArCI,CAAP;AAuCD,CAnDD;;AAqDA,eAAevB,+BAAf"}