{"version":3,"names":["React","getDownscaleSize","SBUUtils","createExpoMediaService","avModule","thumbnailModule","imageManipulator","fsModule","VideoComponent","source","resizeMode","onLoad","props","getVideoThumbnail","url","quality","timeMills","uri","getThumbnailAsync","time","path","compressImage","maxWidth","maxHeight","compressionRate","originSize","getImageSize","resizingSize","width","height","compressedURI","manipulateAsync","resize","compress","Math","min","max","size","getInfoAsync"],"sources":["createMediaService.expo.tsx"],"sourcesContent":["import type * as ExpoAV from 'expo-av';\nimport type * as ExpoFS from 'expo-file-system';\nimport type * as ExpoImageManipulator from 'expo-image-manipulator';\nimport type * as ExpoVideoThumbnail from 'expo-video-thumbnails';\nimport React from 'react';\n\nimport { getDownscaleSize } from '@sendbird/uikit-utils';\n\nimport SBUUtils from '../libs/SBUUtils';\nimport type { MediaServiceInterface } from './types';\n\ntype Modules = {\n  avModule: typeof ExpoAV;\n  thumbnailModule: typeof ExpoVideoThumbnail;\n  imageManipulator: typeof ExpoImageManipulator;\n  fsModule: typeof ExpoFS;\n};\n\nconst createExpoMediaService = ({\n  avModule,\n  thumbnailModule,\n  imageManipulator,\n  fsModule,\n}: Modules): MediaServiceInterface => {\n  return {\n    VideoComponent({ source, resizeMode, onLoad, ...props }) {\n      // FIXME: type error https://github.com/expo/expo/issues/17101\n      // @ts-ignore\n      return <avModule.Video {...props} source={source} resizeMode={resizeMode} onLoad={onLoad} useNativeControls />;\n    },\n    async getVideoThumbnail({ url, quality, timeMills }) {\n      try {\n        const { uri } = await thumbnailModule.getThumbnailAsync(url, { quality, time: timeMills });\n        return { path: uri };\n      } catch {\n        return null;\n      }\n    },\n    async compressImage({ maxWidth, maxHeight, compressionRate = 1, uri }) {\n      const originSize = await SBUUtils.getImageSize(uri);\n      const resizingSize = getDownscaleSize(originSize, { width: maxWidth, height: maxHeight });\n\n      const { uri: compressedURI } = await imageManipulator.manipulateAsync(uri, [{ resize: resizingSize }], {\n        compress: Math.min(Math.max(0, compressionRate), 1),\n      });\n      const { size = 0 } = await fsModule.getInfoAsync(uri);\n\n      return { uri: compressedURI, size };\n    },\n  };\n};\n\nexport default createExpoMediaService;\n"],"mappings":";;AAIA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,uBAAjC;AAEA,OAAOC,QAAP,MAAqB,kBAArB;;AAUA,MAAMC,sBAAsB,GAAG,QAKO;EAAA,IALN;IAC9BC,QAD8B;IAE9BC,eAF8B;IAG9BC,gBAH8B;IAI9BC;EAJ8B,CAKM;EACpC,OAAO;IACLC,cAAc,QAA2C;MAAA,IAA1C;QAAEC,MAAF;QAAUC,UAAV;QAAsBC,MAAtB;QAA8B,GAAGC;MAAjC,CAA0C;MACvD;MACA;MACA,oBAAO,oBAAC,QAAD,CAAU,KAAV,eAAoBA,KAApB;QAA2B,MAAM,EAAEH,MAAnC;QAA2C,UAAU,EAAEC,UAAvD;QAAmE,MAAM,EAAEC,MAA3E;QAAmF,iBAAiB;MAApG,GAAP;IACD,CALI;;IAML,MAAME,iBAAN,QAAqD;MAAA,IAA7B;QAAEC,GAAF;QAAOC,OAAP;QAAgBC;MAAhB,CAA6B;;MACnD,IAAI;QACF,MAAM;UAAEC;QAAF,IAAU,MAAMZ,eAAe,CAACa,iBAAhB,CAAkCJ,GAAlC,EAAuC;UAAEC,OAAF;UAAWI,IAAI,EAAEH;QAAjB,CAAvC,CAAtB;QACA,OAAO;UAAEI,IAAI,EAAEH;QAAR,CAAP;MACD,CAHD,CAGE,MAAM;QACN,OAAO,IAAP;MACD;IACF,CAbI;;IAcL,MAAMI,aAAN,QAAuE;MAAA,IAAnD;QAAEC,QAAF;QAAYC,SAAZ;QAAuBC,eAAe,GAAG,CAAzC;QAA4CP;MAA5C,CAAmD;MACrE,MAAMQ,UAAU,GAAG,MAAMvB,QAAQ,CAACwB,YAAT,CAAsBT,GAAtB,CAAzB;MACA,MAAMU,YAAY,GAAG1B,gBAAgB,CAACwB,UAAD,EAAa;QAAEG,KAAK,EAAEN,QAAT;QAAmBO,MAAM,EAAEN;MAA3B,CAAb,CAArC;MAEA,MAAM;QAAEN,GAAG,EAAEa;MAAP,IAAyB,MAAMxB,gBAAgB,CAACyB,eAAjB,CAAiCd,GAAjC,EAAsC,CAAC;QAAEe,MAAM,EAAEL;MAAV,CAAD,CAAtC,EAAkE;QACrGM,QAAQ,EAAEC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYZ,eAAZ,CAAT,EAAuC,CAAvC;MAD2F,CAAlE,CAArC;MAGA,MAAM;QAAEa,IAAI,GAAG;MAAT,IAAe,MAAM9B,QAAQ,CAAC+B,YAAT,CAAsBrB,GAAtB,CAA3B;MAEA,OAAO;QAAEA,GAAG,EAAEa,aAAP;QAAsBO;MAAtB,CAAP;IACD;;EAxBI,CAAP;AA0BD,CAhCD;;AAkCA,eAAelC,sBAAf"}