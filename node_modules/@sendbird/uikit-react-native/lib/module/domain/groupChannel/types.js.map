{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\nimport type { FlatListProps } from 'react-native';\n\nimport type { UseGroupChannelMessagesOptions } from '@sendbird/uikit-chat-hooks';\nimport type {\n  SendbirdFileMessage,\n  SendbirdFileMessageCreateParams,\n  SendbirdGroupChannel,\n  SendbirdMember,\n  SendbirdMessage,\n  SendbirdUser,\n  SendbirdUserMessage,\n  SendbirdUserMessageCreateParams,\n} from '@sendbird/uikit-utils';\n\nimport type { FileType } from '../../platform/types';\nimport type { CommonComponent, MentionedUser, Range } from '../../types';\n\ntype UserMessageMentionParams = Required<{\n  messageTemplate: SendbirdUserMessageCreateParams['mentionedMessageTemplate'];\n  userIds: SendbirdUserMessageCreateParams['mentionedUserIds'];\n  type: SendbirdUserMessageCreateParams['mentionType'];\n}>;\n\nexport interface GroupChannelProps {\n  Fragment: {\n    channel: SendbirdGroupChannel;\n    onChannelDeleted: () => void;\n    onPressHeaderLeft: GroupChannelProps['Header']['onPressHeaderLeft'];\n    onPressHeaderRight: GroupChannelProps['Header']['onPressHeaderRight'];\n\n    onBeforeSendFileMessage?: (\n      params: SendbirdFileMessageCreateParams,\n    ) => SendbirdFileMessageCreateParams | Promise<SendbirdFileMessageCreateParams>;\n    onBeforeSendUserMessage?: (\n      params: SendbirdUserMessageCreateParams,\n    ) => SendbirdUserMessageCreateParams | Promise<SendbirdUserMessageCreateParams>;\n    onPressMediaMessage?: GroupChannelProps['MessageList']['onPressMediaMessage'];\n\n    renderMessage?: GroupChannelProps['MessageList']['renderMessage'];\n    renderNewMessagesButton?: GroupChannelProps['MessageList']['renderNewMessagesButton'];\n    renderScrollToBottomButton?: GroupChannelProps['MessageList']['renderScrollToBottomButton'];\n\n    enableTypingIndicator?: GroupChannelProps['Provider']['enableTypingIndicator'];\n    enableMessageGrouping?: GroupChannelProps['MessageList']['enableMessageGrouping'];\n\n    keyboardAvoidOffset?: GroupChannelProps['Provider']['keyboardAvoidOffset'];\n    flatListProps?: GroupChannelProps['MessageList']['flatListProps'];\n    sortComparator?: UseGroupChannelMessagesOptions['sortComparator'];\n    collectionCreator?: UseGroupChannelMessagesOptions['collectionCreator'];\n    queryCreator?: UseGroupChannelMessagesOptions['queryCreator'];\n\n    /** @deprecated `onPressImageMessage` is deprecated, please use `onPressMediaMessage` instead **/\n    onPressImageMessage?: GroupChannelProps['MessageList']['onPressImageMessage'];\n  };\n  Header: {\n    onPressHeaderLeft: () => void;\n    onPressHeaderRight: () => void;\n  };\n  MessageList: {\n    enableMessageGrouping: boolean;\n    currentUserId?: string;\n    channel: SendbirdGroupChannel;\n    messages: SendbirdMessage[];\n    nextMessages: SendbirdMessage[];\n    newMessagesFromMembers: SendbirdMessage[];\n    onTopReached: () => void;\n    onBottomReached: () => void;\n\n    onResendFailedMessage: (failedMessage: SendbirdUserMessage | SendbirdFileMessage) => Promise<void>;\n    onDeleteMessage: (message: SendbirdUserMessage | SendbirdFileMessage) => Promise<void>;\n    onPressMediaMessage?: (message: SendbirdFileMessage, deleteMessage: () => Promise<void>, uri: string) => void;\n\n    renderMessage: (props: {\n      message: SendbirdMessage;\n      prevMessage?: SendbirdMessage;\n      nextMessage?: SendbirdMessage;\n      onPress?: () => void;\n      onLongPress?: () => void;\n      channel: GroupChannelProps['MessageList']['channel'];\n      currentUserId?: GroupChannelProps['MessageList']['currentUserId'];\n      enableMessageGrouping: GroupChannelProps['MessageList']['enableMessageGrouping'];\n    }) => React.ReactElement | null;\n    renderNewMessagesButton: null | CommonComponent<{\n      visible: boolean;\n      onPress: () => void;\n      newMessages: SendbirdMessage[];\n    }>;\n    renderScrollToBottomButton: null | CommonComponent<{\n      visible: boolean;\n      onPress: () => void;\n    }>;\n    flatListProps?: Omit<FlatListProps<SendbirdMessage>, 'data' | 'renderItem'>;\n\n    /** @deprecated `onPressImageMessage` is deprecated, please use `onPressMediaMessage` instead **/\n    onPressImageMessage?: (message: SendbirdFileMessage, uri: string) => void;\n  };\n  Input: {\n    shouldRenderInput: boolean;\n    onSendFileMessage: (file: FileType) => Promise<void>;\n    onSendUserMessage: (text: string, mention?: UserMessageMentionParams) => Promise<void>;\n    onUpdateFileMessage: (editedFile: FileType, message: SendbirdFileMessage) => Promise<void>;\n    onUpdateUserMessage: (\n      editedText: string,\n      message: SendbirdUserMessage,\n      mention?: UserMessageMentionParams,\n    ) => Promise<void>;\n    SuggestedMentionList: (props: GroupChannelProps['SuggestedMentionList']) => JSX.Element | null;\n  };\n\n  SuggestedMentionList: {\n    text: string;\n    selection: Range;\n    topInset: number;\n    bottomInset: number;\n    inputHeight: number;\n    onPressToMention: (user: SendbirdMember, searchStringRange: Range) => void;\n    mentionedUsers: MentionedUser[];\n  };\n  Provider: {\n    channel: SendbirdGroupChannel;\n    enableTypingIndicator: boolean;\n    keyboardAvoidOffset?: number;\n  };\n}\n\n/**\n * Internal context for GroupChannel\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport interface GroupChannelContextsType {\n  Fragment: React.Context<{\n    headerTitle: string;\n    channel: SendbirdGroupChannel;\n    messageToEdit?: SendbirdUserMessage | SendbirdFileMessage;\n    setMessageToEdit: (msg?: SendbirdUserMessage | SendbirdFileMessage) => void;\n    keyboardAvoidOffset?: number;\n  }>;\n  TypingIndicator: React.Context<{\n    typingUsers: SendbirdUser[];\n  }>;\n}\nexport interface GroupChannelModule {\n  Provider: CommonComponent<GroupChannelProps['Provider']>;\n  Header: CommonComponent<GroupChannelProps['Header']>;\n  MessageList: CommonComponent<GroupChannelProps['MessageList']>;\n  Input: CommonComponent<GroupChannelProps['Input']>;\n  SuggestedMentionList: CommonComponent<GroupChannelProps['SuggestedMentionList']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n}\n\nexport type GroupChannelFragment = CommonComponent<GroupChannelProps['Fragment']>;\n"],"mappings":""}