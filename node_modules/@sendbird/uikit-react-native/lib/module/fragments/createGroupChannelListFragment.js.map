{"version":3,"names":["React","useGroupChannelList","PASS","useAppState","useFreshCallback","StatusComposition","GroupChannelPreviewContainer","createGroupChannelListModule","useSendbirdChat","createGroupChannelListFragment","initModule","GroupChannelListModule","onPressChannel","onPressCreateChannel","queryCreator","collectionCreator","renderGroupChannelPreview","skipTypeSelection","flatListProps","menuItemCreator","sdk","currentUser","features","markAsDeliveredWithChannel","groupChannels","next","loading","userId","enableCollectionWithoutLocalCache","deliveryReceiptEnabled","status","forEach","_renderGroupChannelPreview","channel","onLongPressChannel","isChannelTypeAvailable","broadcastChannelEnabled","superGroupChannelEnabled","ListEmptyComponent","contentContainerStyle","flexGrow"],"sources":["createGroupChannelListFragment.tsx"],"sourcesContent":["import React from 'react';\n\nimport { useGroupChannelList } from '@sendbird/uikit-chat-hooks';\nimport { PASS, useAppState, useFreshCallback } from '@sendbird/uikit-utils';\n\nimport StatusComposition from '../components/StatusComposition';\nimport GroupChannelPreviewContainer from '../containers/GroupChannelPreviewContainer';\nimport createGroupChannelListModule from '../domain/groupChannelList/module/createGroupChannelListModule';\nimport type {\n  GroupChannelListFragment,\n  GroupChannelListModule,\n  GroupChannelListProps,\n} from '../domain/groupChannelList/types';\nimport { useSendbirdChat } from '../hooks/useContext';\n\nconst createGroupChannelListFragment = (initModule?: Partial<GroupChannelListModule>): GroupChannelListFragment => {\n  const GroupChannelListModule = createGroupChannelListModule(initModule);\n  return ({\n    onPressChannel,\n    onPressCreateChannel,\n    queryCreator,\n    collectionCreator,\n    renderGroupChannelPreview,\n    skipTypeSelection = false,\n    flatListProps = {},\n    menuItemCreator = PASS,\n  }) => {\n    const { sdk, currentUser, features, markAsDeliveredWithChannel } = useSendbirdChat();\n    const { groupChannels, next, loading } = useGroupChannelList(sdk, currentUser?.userId, {\n      queryCreator,\n      collectionCreator,\n      enableCollectionWithoutLocalCache: !queryCreator,\n    });\n\n    if (features.deliveryReceiptEnabled) {\n      useAppState('change', (status) => {\n        if (status === 'active') groupChannels.forEach(markAsDeliveredWithChannel);\n      });\n    }\n\n    const _renderGroupChannelPreview: GroupChannelListProps['List']['renderGroupChannelPreview'] = useFreshCallback(\n      (channel, onLongPressChannel) => {\n        if (renderGroupChannelPreview) return renderGroupChannelPreview(channel, onLongPressChannel);\n        return (\n          <GroupChannelPreviewContainer\n            channel={channel}\n            onPress={() => onPressChannel(channel)}\n            onLongPress={() => onLongPressChannel()}\n          />\n        );\n      },\n    );\n\n    const isChannelTypeAvailable = features.broadcastChannelEnabled || features.superGroupChannelEnabled;\n\n    return (\n      <GroupChannelListModule.Provider>\n        <GroupChannelListModule.Header />\n        <StatusComposition loading={loading} LoadingComponent={<GroupChannelListModule.StatusLoading />}>\n          <GroupChannelListModule.List\n            menuItemCreator={menuItemCreator}\n            renderGroupChannelPreview={_renderGroupChannelPreview}\n            groupChannels={groupChannels}\n            onLoadNext={next}\n            flatListProps={{\n              ListEmptyComponent: <GroupChannelListModule.StatusEmpty />,\n              contentContainerStyle: { flexGrow: 1 },\n              ...flatListProps,\n            }}\n          />\n        </StatusComposition>\n        <GroupChannelListModule.TypeSelector\n          skipTypeSelection={isChannelTypeAvailable ? skipTypeSelection : true}\n          onSelectType={onPressCreateChannel}\n        />\n      </GroupChannelListModule.Provider>\n    );\n  };\n};\n\nexport default createGroupChannelListFragment;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,mBAAT,QAAoC,4BAApC;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,gBAA5B,QAAoD,uBAApD;AAEA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,4BAAP,MAAyC,4CAAzC;AACA,OAAOC,4BAAP,MAAyC,gEAAzC;AAMA,SAASC,eAAT,QAAgC,qBAAhC;;AAEA,MAAMC,8BAA8B,GAAIC,UAAD,IAA4E;EACjH,MAAMC,sBAAsB,GAAGJ,4BAA4B,CAACG,UAAD,CAA3D;EACA,OAAO,QASD;IAAA,IATE;MACNE,cADM;MAENC,oBAFM;MAGNC,YAHM;MAINC,iBAJM;MAKNC,yBALM;MAMNC,iBAAiB,GAAG,KANd;MAONC,aAAa,GAAG,EAPV;MAQNC,eAAe,GAAGjB;IARZ,CASF;IACJ,MAAM;MAAEkB,GAAF;MAAOC,WAAP;MAAoBC,QAApB;MAA8BC;IAA9B,IAA6Df,eAAe,EAAlF;IACA,MAAM;MAAEgB,aAAF;MAAiBC,IAAjB;MAAuBC;IAAvB,IAAmCzB,mBAAmB,CAACmB,GAAD,EAAMC,WAAN,aAAMA,WAAN,uBAAMA,WAAW,CAAEM,MAAnB,EAA2B;MACrFb,YADqF;MAErFC,iBAFqF;MAGrFa,iCAAiC,EAAE,CAACd;IAHiD,CAA3B,CAA5D;;IAMA,IAAIQ,QAAQ,CAACO,sBAAb,EAAqC;MACnC1B,WAAW,CAAC,QAAD,EAAY2B,MAAD,IAAY;QAChC,IAAIA,MAAM,KAAK,QAAf,EAAyBN,aAAa,CAACO,OAAd,CAAsBR,0BAAtB;MAC1B,CAFU,CAAX;IAGD;;IAED,MAAMS,0BAAsF,GAAG5B,gBAAgB,CAC7G,CAAC6B,OAAD,EAAUC,kBAAV,KAAiC;MAC/B,IAAIlB,yBAAJ,EAA+B,OAAOA,yBAAyB,CAACiB,OAAD,EAAUC,kBAAV,CAAhC;MAC/B,oBACE,oBAAC,4BAAD;QACE,OAAO,EAAED,OADX;QAEE,OAAO,EAAE,MAAMrB,cAAc,CAACqB,OAAD,CAF/B;QAGE,WAAW,EAAE,MAAMC,kBAAkB;MAHvC,EADF;IAOD,CAV4G,CAA/G;;IAaA,MAAMC,sBAAsB,GAAGb,QAAQ,CAACc,uBAAT,IAAoCd,QAAQ,CAACe,wBAA5E;IAEA,oBACE,oBAAC,sBAAD,CAAwB,QAAxB,qBACE,oBAAC,sBAAD,CAAwB,MAAxB,OADF,eAEE,oBAAC,iBAAD;MAAmB,OAAO,EAAEX,OAA5B;MAAqC,gBAAgB,eAAE,oBAAC,sBAAD,CAAwB,aAAxB;IAAvD,gBACE,oBAAC,sBAAD,CAAwB,IAAxB;MACE,eAAe,EAAEP,eADnB;MAEE,yBAAyB,EAAEa,0BAF7B;MAGE,aAAa,EAAER,aAHjB;MAIE,UAAU,EAAEC,IAJd;MAKE,aAAa,EAAE;QACba,kBAAkB,eAAE,oBAAC,sBAAD,CAAwB,WAAxB,OADP;QAEbC,qBAAqB,EAAE;UAAEC,QAAQ,EAAE;QAAZ,CAFV;QAGb,GAAGtB;MAHU;IALjB,EADF,CAFF,eAeE,oBAAC,sBAAD,CAAwB,YAAxB;MACE,iBAAiB,EAAEiB,sBAAsB,GAAGlB,iBAAH,GAAuB,IADlE;MAEE,YAAY,EAAEJ;IAFhB,EAfF,CADF;EAsBD,CA5DD;AA6DD,CA/DD;;AAiEA,eAAeJ,8BAAf"}