function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import InternalLocalCacheStorage from './InternalLocalCacheStorage';

class MemoryStorage {
  constructor() {
    _defineProperty(this, "_data", {});
  }

  async getAllKeys() {
    return Object.keys(this._data);
  }

  async getItem(key) {
    return this._data[key];
  }

  async removeItem(key) {
    delete this._data[key];
  }

  async setItem(key, value) {
    this._data[key] = value;
  }

}

class EmojiManager {
  constructor() {
    let internalStorage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new InternalLocalCacheStorage(new MemoryStorage());
    this.internalStorage = internalStorage;

    _defineProperty(this, "emojiStorage", {
      data: null,
      get: async () => {
        if (!this.emojiStorage.data) {
          const strItem = await this.internalStorage.getItem(EmojiManager.key);
          if (strItem) this.emojiStorage.data = Object.freeze(JSON.parse(strItem));
        }

        return this.emojiStorage.data;
      },
      set: async data => {
        this.emojiStorage.data = Object.freeze(data);
        await this.internalStorage.setItem(EmojiManager.key, JSON.stringify(data));
      }
    });

    _defineProperty(this, "_emojiCategoryMap", {});

    _defineProperty(this, "_allEmojiMap", {});

    _defineProperty(this, "_allEmoji", []);

    _defineProperty(this, "init", async emojiContainer => {
      if (emojiContainer) await this.emojiStorage.set(emojiContainer);
      const container = await this.emojiStorage.get();

      if (container) {
        for (const category of container.emojiCategories) {
          this._emojiCategoryMap[category.id] = category;

          for (const emoji of category.emojis) {
            this._allEmojiMap[emoji.key] = emoji;
          }
        }

        this._allEmoji = Object.values(this._allEmojiMap);
      }
    });
  }

  get emojiCategoryMap() {
    return this._emojiCategoryMap;
  }

  get allEmojiMap() {
    return this._allEmojiMap;
  }

  get allEmoji() {
    return this._allEmoji;
  }

}

_defineProperty(EmojiManager, "key", 'sendbird-uikit@emoji-manager');

export default EmojiManager;
//# sourceMappingURL=EmojiManager.js.map