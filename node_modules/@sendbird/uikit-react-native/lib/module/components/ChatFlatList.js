function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef } from 'react';
import { FlatList, Platform } from 'react-native';
import { useUIKitTheme } from '@sendbird/uikit-react-native-foundation';
import { getMessageUniqId, isMyMessage } from '@sendbird/uikit-utils';
let ANDROID_BUG_ALERT_SHOWED = Platform.OS !== 'android';
const BOTTOM_DETECT_THRESHOLD = 25; // const AUTO_SCROLL_TO_TOP_THRESHOLD = 15;

function hasReachedToBottom(yPos) {
  let thresholdPx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return thresholdPx >= yPos;
}

// FIXME: Inverted FlatList performance issue on Android {@link https://github.com/facebook/react-native/issues/30034}
const ChatFlatList = /*#__PURE__*/forwardRef(function CustomFlatList(_ref, ref) {
  var _props$data;

  let {
    onTopReached,
    nextMessages,
    onBottomReached,
    onLeaveScrollBottom,
    onScroll,
    currentUserId,
    ...props
  } = _ref;
  const {
    select
  } = useUIKitTheme();
  const scrollRef = useRef(null);
  const yPos = useRef(0);
  useImperativeHandle(ref, () => ({
    scrollToBottom: function () {
      var _scrollRef$current;

      let animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollToOffset({
        animated,
        offset: 0
      });
    }
  }), []);
  useEffect(() => {
    const latestMessage = nextMessages[nextMessages.length - 1];
    if (!latestMessage) return;

    if (hasReachedToBottom(yPos.current)) {
      onBottomReached();
    } else if (isMyMessage(latestMessage, currentUserId)) {
      var _scrollRef$current2;

      (_scrollRef$current2 = scrollRef.current) === null || _scrollRef$current2 === void 0 ? void 0 : _scrollRef$current2.scrollToOffset({
        animated: false,
        offset: 0
      });
    }
  }, [onBottomReached, nextMessages, currentUserId]);

  const _onScroll = useCallback(event => {
    const {
      contentOffset
    } = event.nativeEvent;

    if (BOTTOM_DETECT_THRESHOLD < yPos.current && contentOffset.y <= BOTTOM_DETECT_THRESHOLD) {
      onLeaveScrollBottom(false);
    } else if (BOTTOM_DETECT_THRESHOLD < contentOffset.y && yPos.current <= BOTTOM_DETECT_THRESHOLD) {
      onLeaveScrollBottom(true);
    }

    yPos.current = contentOffset.y;
    onScroll === null || onScroll === void 0 ? void 0 : onScroll(event);
    if (hasReachedToBottom(yPos.current)) onBottomReached();
  }, [onScroll, onBottomReached]);

  if (__DEV__ && !ANDROID_BUG_ALERT_SHOWED) {
    ANDROID_BUG_ALERT_SHOWED = true; // eslint-disable-next-line no-console

    console.warn('UIKit Warning: Inverted FlatList has a performance issue on Android, Maybe this is a bug please refer link\nhttps://github.com/facebook/react-native/issues/30034');
  }

  return /*#__PURE__*/React.createElement(FlatList, _extends({
    bounces: false,
    removeClippedSubviews: true,
    keyboardDismissMode: 'on-drag',
    keyboardShouldPersistTaps: 'handled',
    indicatorStyle: select({
      light: 'black',
      dark: 'white'
    })
  }, props, {
    // FIXME: inverted list of ListEmptyComponent is reversed {@link https://github.com/facebook/react-native/issues/21196#issuecomment-836937743}
    inverted: Boolean((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length) // FIXME: maintainVisibleContentPosition is not working on Android {@link https://github.com/facebook/react-native/issues/25239}
    // maintainVisibleContentPosition={{ minIndexForVisible: 1, autoscrollToTopThreshold: AUTO_SCROLL_TO_TOP_THRESHOLD }}
    ,
    ref: scrollRef,
    onEndReachedThreshold: 0.5,
    onEndReached: onTopReached,
    scrollEventThrottle: 16,
    onScroll: _onScroll,
    keyExtractor: getMessageUniqId
  }));
});
export default ChatFlatList;
//# sourceMappingURL=ChatFlatList.js.map