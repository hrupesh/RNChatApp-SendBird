{"version":3,"names":["React","View","Avatar","Icon","useUIKitTheme","getMembersExcludeMe","isDefaultCoverImage","useSendbirdChat","ChannelCover","channel","avatarProps","currentUser","colors","coverUrl","isBroadcast","containerStyle","size","onBackgroundReverse01","backgroundColor","secondary","borderRadius","padding","memberCount","otherUserProfile","members","filter","m","userId","profileUrl","map"],"sources":["ChannelCover.tsx"],"sourcesContent":["import React from 'react';\nimport type { StyleProp, ViewStyle } from 'react-native';\nimport { View } from 'react-native';\n\nimport { Avatar, Icon, useUIKitTheme } from '@sendbird/uikit-react-native-foundation';\nimport { SendbirdGroupChannel, getMembersExcludeMe, isDefaultCoverImage } from '@sendbird/uikit-utils';\n\nimport { useSendbirdChat } from '../hooks/useContext';\n\ntype Props = {\n  channel: SendbirdGroupChannel;\n  size: number;\n  containerStyle?: StyleProp<ViewStyle>;\n};\n\nconst ChannelCover = ({ channel, ...avatarProps }: Props) => {\n  const { currentUser } = useSendbirdChat();\n  const { colors } = useUIKitTheme();\n\n  // custom channel cover\n  if (!isDefaultCoverImage(channel.coverUrl) || !currentUser) {\n    return <Avatar uri={channel.coverUrl} {...avatarProps} />;\n  }\n\n  // broadcast channel cover\n  if (channel.isBroadcast) {\n    return (\n      <View style={avatarProps.containerStyle}>\n        <Icon\n          icon={'broadcast'}\n          size={avatarProps.size * (4 / 7)}\n          color={colors.onBackgroundReverse01}\n          containerStyle={{\n            backgroundColor: colors.secondary,\n            borderRadius: avatarProps.size * 0.5,\n            padding: avatarProps.size * (3 / 7) * 0.5,\n          }}\n        />\n      </View>\n    );\n  }\n\n  // no members, use anonymous profile\n  if (channel.memberCount <= 1) {\n    return <Avatar {...avatarProps} />;\n  }\n\n  // 1:1, use member profile\n  if (channel.memberCount === 2) {\n    const otherUserProfile = channel.members.filter((m) => m.userId !== currentUser.userId)?.[0]?.profileUrl;\n    return <Avatar uri={otherUserProfile} {...avatarProps} />;\n  }\n\n  // group, use members profile\n  return (\n    <Avatar.Group {...avatarProps}>\n      {getMembersExcludeMe(channel, currentUser?.userId).map((m) => (\n        <Avatar key={m.userId} uri={m.profileUrl} />\n      ))}\n    </Avatar.Group>\n  );\n};\n\nexport default ChannelCover;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,QAAqB,cAArB;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,aAAvB,QAA4C,yCAA5C;AACA,SAA+BC,mBAA/B,EAAoDC,mBAApD,QAA+E,uBAA/E;AAEA,SAASC,eAAT,QAAgC,qBAAhC;;AAQA,MAAMC,YAAY,GAAG,QAAwC;EAAA,IAAvC;IAAEC,OAAF;IAAW,GAAGC;EAAd,CAAuC;EAC3D,MAAM;IAAEC;EAAF,IAAkBJ,eAAe,EAAvC;EACA,MAAM;IAAEK;EAAF,IAAaR,aAAa,EAAhC,CAF2D,CAI3D;;EACA,IAAI,CAACE,mBAAmB,CAACG,OAAO,CAACI,QAAT,CAApB,IAA0C,CAACF,WAA/C,EAA4D;IAC1D,oBAAO,oBAAC,MAAD;MAAQ,GAAG,EAAEF,OAAO,CAACI;IAArB,GAAmCH,WAAnC,EAAP;EACD,CAP0D,CAS3D;;;EACA,IAAID,OAAO,CAACK,WAAZ,EAAyB;IACvB,oBACE,oBAAC,IAAD;MAAM,KAAK,EAAEJ,WAAW,CAACK;IAAzB,gBACE,oBAAC,IAAD;MACE,IAAI,EAAE,WADR;MAEE,IAAI,EAAEL,WAAW,CAACM,IAAZ,IAAoB,IAAI,CAAxB,CAFR;MAGE,KAAK,EAAEJ,MAAM,CAACK,qBAHhB;MAIE,cAAc,EAAE;QACdC,eAAe,EAAEN,MAAM,CAACO,SADV;QAEdC,YAAY,EAAEV,WAAW,CAACM,IAAZ,GAAmB,GAFnB;QAGdK,OAAO,EAAEX,WAAW,CAACM,IAAZ,IAAoB,IAAI,CAAxB,IAA6B;MAHxB;IAJlB,EADF,CADF;EAcD,CAzB0D,CA2B3D;;;EACA,IAAIP,OAAO,CAACa,WAAR,IAAuB,CAA3B,EAA8B;IAC5B,oBAAO,oBAAC,MAAD,EAAYZ,WAAZ,CAAP;EACD,CA9B0D,CAgC3D;;;EACA,IAAID,OAAO,CAACa,WAAR,KAAwB,CAA5B,EAA+B;IAAA;;IAC7B,MAAMC,gBAAgB,4BAAGd,OAAO,CAACe,OAAR,CAAgBC,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAahB,WAAW,CAACgB,MAAvD,CAAH,oFAAG,sBAAiE,CAAjE,CAAH,2DAAG,uBAAqEC,UAA9F;IACA,oBAAO,oBAAC,MAAD;MAAQ,GAAG,EAAEL;IAAb,GAAmCb,WAAnC,EAAP;EACD,CApC0D,CAsC3D;;;EACA,oBACE,oBAAC,MAAD,CAAQ,KAAR,EAAkBA,WAAlB,EACGL,mBAAmB,CAACI,OAAD,EAAUE,WAAV,aAAUA,WAAV,uBAAUA,WAAW,CAAEgB,MAAvB,CAAnB,CAAkDE,GAAlD,CAAuDH,CAAD,iBACrD,oBAAC,MAAD;IAAQ,GAAG,EAAEA,CAAC,CAACC,MAAf;IAAuB,GAAG,EAAED,CAAC,CAACE;EAA9B,EADD,CADH,CADF;AAOD,CA9CD;;AAgDA,eAAepB,YAAf"}