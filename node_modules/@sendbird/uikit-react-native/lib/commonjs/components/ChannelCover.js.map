{"version":3,"names":["ChannelCover","channel","avatarProps","currentUser","useSendbirdChat","colors","useUIKitTheme","isDefaultCoverImage","coverUrl","isBroadcast","containerStyle","size","onBackgroundReverse01","backgroundColor","secondary","borderRadius","padding","memberCount","otherUserProfile","members","filter","m","userId","profileUrl","getMembersExcludeMe","map"],"sources":["ChannelCover.tsx"],"sourcesContent":["import React from 'react';\nimport type { StyleProp, ViewStyle } from 'react-native';\nimport { View } from 'react-native';\n\nimport { Avatar, Icon, useUIKitTheme } from '@sendbird/uikit-react-native-foundation';\nimport { SendbirdGroupChannel, getMembersExcludeMe, isDefaultCoverImage } from '@sendbird/uikit-utils';\n\nimport { useSendbirdChat } from '../hooks/useContext';\n\ntype Props = {\n  channel: SendbirdGroupChannel;\n  size: number;\n  containerStyle?: StyleProp<ViewStyle>;\n};\n\nconst ChannelCover = ({ channel, ...avatarProps }: Props) => {\n  const { currentUser } = useSendbirdChat();\n  const { colors } = useUIKitTheme();\n\n  // custom channel cover\n  if (!isDefaultCoverImage(channel.coverUrl) || !currentUser) {\n    return <Avatar uri={channel.coverUrl} {...avatarProps} />;\n  }\n\n  // broadcast channel cover\n  if (channel.isBroadcast) {\n    return (\n      <View style={avatarProps.containerStyle}>\n        <Icon\n          icon={'broadcast'}\n          size={avatarProps.size * (4 / 7)}\n          color={colors.onBackgroundReverse01}\n          containerStyle={{\n            backgroundColor: colors.secondary,\n            borderRadius: avatarProps.size * 0.5,\n            padding: avatarProps.size * (3 / 7) * 0.5,\n          }}\n        />\n      </View>\n    );\n  }\n\n  // no members, use anonymous profile\n  if (channel.memberCount <= 1) {\n    return <Avatar {...avatarProps} />;\n  }\n\n  // 1:1, use member profile\n  if (channel.memberCount === 2) {\n    const otherUserProfile = channel.members.filter((m) => m.userId !== currentUser.userId)?.[0]?.profileUrl;\n    return <Avatar uri={otherUserProfile} {...avatarProps} />;\n  }\n\n  // group, use members profile\n  return (\n    <Avatar.Group {...avatarProps}>\n      {getMembersExcludeMe(channel, currentUser?.userId).map((m) => (\n        <Avatar key={m.userId} uri={m.profileUrl} />\n      ))}\n    </Avatar.Group>\n  );\n};\n\nexport default ChannelCover;\n"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAEA;;;;;;AAQA,MAAMA,YAAY,GAAG,QAAwC;EAAA,IAAvC;IAAEC,OAAF;IAAW,GAAGC;EAAd,CAAuC;EAC3D,MAAM;IAAEC;EAAF,IAAkB,IAAAC,2BAAA,GAAxB;EACA,MAAM;IAAEC;EAAF,IAAa,IAAAC,yCAAA,GAAnB,CAF2D,CAI3D;;EACA,IAAI,CAAC,IAAAC,+BAAA,EAAoBN,OAAO,CAACO,QAA5B,CAAD,IAA0C,CAACL,WAA/C,EAA4D;IAC1D,oBAAO,6BAAC,kCAAD;MAAQ,GAAG,EAAEF,OAAO,CAACO;IAArB,GAAmCN,WAAnC,EAAP;EACD,CAP0D,CAS3D;;;EACA,IAAID,OAAO,CAACQ,WAAZ,EAAyB;IACvB,oBACE,6BAAC,iBAAD;MAAM,KAAK,EAAEP,WAAW,CAACQ;IAAzB,gBACE,6BAAC,gCAAD;MACE,IAAI,EAAE,WADR;MAEE,IAAI,EAAER,WAAW,CAACS,IAAZ,IAAoB,IAAI,CAAxB,CAFR;MAGE,KAAK,EAAEN,MAAM,CAACO,qBAHhB;MAIE,cAAc,EAAE;QACdC,eAAe,EAAER,MAAM,CAACS,SADV;QAEdC,YAAY,EAAEb,WAAW,CAACS,IAAZ,GAAmB,GAFnB;QAGdK,OAAO,EAAEd,WAAW,CAACS,IAAZ,IAAoB,IAAI,CAAxB,IAA6B;MAHxB;IAJlB,EADF,CADF;EAcD,CAzB0D,CA2B3D;;;EACA,IAAIV,OAAO,CAACgB,WAAR,IAAuB,CAA3B,EAA8B;IAC5B,oBAAO,6BAAC,kCAAD,EAAYf,WAAZ,CAAP;EACD,CA9B0D,CAgC3D;;;EACA,IAAID,OAAO,CAACgB,WAAR,KAAwB,CAA5B,EAA+B;IAAA;;IAC7B,MAAMC,gBAAgB,4BAAGjB,OAAO,CAACkB,OAAR,CAAgBC,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAanB,WAAW,CAACmB,MAAvD,CAAH,oFAAG,sBAAiE,CAAjE,CAAH,2DAAG,uBAAqEC,UAA9F;IACA,oBAAO,6BAAC,kCAAD;MAAQ,GAAG,EAAEL;IAAb,GAAmChB,WAAnC,EAAP;EACD,CApC0D,CAsC3D;;;EACA,oBACE,6BAAC,kCAAD,CAAQ,KAAR,EAAkBA,WAAlB,EACG,IAAAsB,+BAAA,EAAoBvB,OAApB,EAA6BE,WAA7B,aAA6BA,WAA7B,uBAA6BA,WAAW,CAAEmB,MAA1C,EAAkDG,GAAlD,CAAuDJ,CAAD,iBACrD,6BAAC,kCAAD;IAAQ,GAAG,EAAEA,CAAC,CAACC,MAAf;IAAuB,GAAG,EAAED,CAAC,CAACE;EAA9B,EADD,CADH,CADF;AAOD,CA9CD;;eAgDevB,Y"}