{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\nimport type { FlatListProps } from 'react-native';\n\nimport type { UseGroupChannelListOptions } from '@sendbird/uikit-chat-hooks';\nimport type { ActionMenuItem } from '@sendbird/uikit-react-native-foundation';\nimport type { SendbirdGroupChannel } from '@sendbird/uikit-utils';\n\nimport type { CommonComponent } from '../../types';\n\nexport interface GroupChannelListProps {\n  /** Props for `GroupChannelListFragment` **/\n  Fragment: {\n    /** Navigate to GroupChannelFragment **/\n    onPressChannel: (channel: SendbirdGroupChannel) => void;\n    /** Navigate to GroupChannelCreateFragment **/\n    onPressCreateChannel: (channelType: GroupChannelType) => void;\n    /** Method to render GroupChannel preview **/\n    renderGroupChannelPreview?: (\n      channel: SendbirdGroupChannel,\n      onLongPressChannel: () => void,\n    ) => React.ReactElement | null;\n    /** Skip type selection, When this is set to true 'channelType' only receive 'GROUP' type **/\n    skipTypeSelection?: boolean;\n    /** Custom Query creator for channels query **/\n    queryCreator?: UseGroupChannelListOptions['queryCreator'];\n    /** Custom Collection creator for group channel collection **/\n    collectionCreator?: UseGroupChannelListOptions['collectionCreator'];\n    /** FlatList props for GroupChannelList.List **/\n    flatListProps?: GroupChannelListProps['List']['flatListProps'];\n    /** Action menu item creator for onLongPress **/\n    menuItemCreator?: GroupChannelListProps['List']['menuItemCreator'];\n  };\n  /** Props for `GroupChannelListModule.Header` **/\n  Header: {};\n  /** Props for `GroupChannelListModule.List` **/\n  List: {\n    /** GroupChannels from SendbirdChat SDK **/\n    groupChannels: SendbirdGroupChannel[];\n    /** Method to render GroupChannel preview **/\n    renderGroupChannelPreview: (\n      // FIXME/BREAKING: Changed to props object\n      channel: SendbirdGroupChannel,\n      onLongPressChannel: () => void,\n    ) => React.ReactElement | null;\n    /** Method to load more data, called with onEndReached of FlatList **/\n    onLoadNext: () => Promise<void>;\n    /** Prop from Fragment **/\n    flatListProps?: Omit<FlatListProps<SendbirdGroupChannel>, 'data' | 'renderItem'>;\n    /** Prop from Fragment **/\n    menuItemCreator?: (defaultMenuItem: ActionMenuItem) => ActionMenuItem;\n  };\n  /** Props for `GroupChannelListModule.TypeSelector` **/\n  TypeSelector: {\n    /** Prop from Fragment `Fragment.skipTypeSelection` **/\n    skipTypeSelection: boolean;\n    /** Method called when type is selected, call `Fragment.onPressCreateChannel` **/\n    onSelectType: (type: GroupChannelType) => void;\n  };\n}\n\n/**\n * Internal context for GroupChannelList\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport interface GroupChannelListContextsType {\n  Fragment: React.Context<{\n    headerTitle: string;\n  }>;\n  TypeSelector: React.Context<{\n    visible: boolean;\n    show: () => void;\n    hide: () => void;\n    headerTitle: string;\n  }>;\n}\nexport interface GroupChannelListModule {\n  Provider: CommonComponent;\n  Header: CommonComponent<GroupChannelListProps['Header']>;\n  List: CommonComponent<GroupChannelListProps['List']>;\n  TypeSelector: CommonComponent<GroupChannelListProps['TypeSelector']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n}\n\nexport type GroupChannelListFragment = CommonComponent<GroupChannelListProps['Fragment']>;\nexport type GroupChannelType = 'GROUP' | 'SUPER_GROUP' | 'BROADCAST';\n"],"mappings":""}