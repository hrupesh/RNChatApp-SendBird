{"version":3,"names":["createGroupChannelListFragment","initModule","GroupChannelListModule","createGroupChannelListModule","onPressChannel","onPressCreateChannel","queryCreator","collectionCreator","renderGroupChannelPreview","skipTypeSelection","flatListProps","menuItemCreator","PASS","sdk","currentUser","features","markAsDeliveredWithChannel","useSendbirdChat","groupChannels","next","loading","useGroupChannelList","userId","enableCollectionWithoutLocalCache","deliveryReceiptEnabled","useAppState","status","forEach","_renderGroupChannelPreview","useFreshCallback","channel","onLongPressChannel","isChannelTypeAvailable","broadcastChannelEnabled","superGroupChannelEnabled","ListEmptyComponent","contentContainerStyle","flexGrow"],"sources":["createGroupChannelListFragment.tsx"],"sourcesContent":["import React from 'react';\n\nimport { useGroupChannelList } from '@sendbird/uikit-chat-hooks';\nimport { PASS, useAppState, useFreshCallback } from '@sendbird/uikit-utils';\n\nimport StatusComposition from '../components/StatusComposition';\nimport GroupChannelPreviewContainer from '../containers/GroupChannelPreviewContainer';\nimport createGroupChannelListModule from '../domain/groupChannelList/module/createGroupChannelListModule';\nimport type {\n  GroupChannelListFragment,\n  GroupChannelListModule,\n  GroupChannelListProps,\n} from '../domain/groupChannelList/types';\nimport { useSendbirdChat } from '../hooks/useContext';\n\nconst createGroupChannelListFragment = (initModule?: Partial<GroupChannelListModule>): GroupChannelListFragment => {\n  const GroupChannelListModule = createGroupChannelListModule(initModule);\n  return ({\n    onPressChannel,\n    onPressCreateChannel,\n    queryCreator,\n    collectionCreator,\n    renderGroupChannelPreview,\n    skipTypeSelection = false,\n    flatListProps = {},\n    menuItemCreator = PASS,\n  }) => {\n    const { sdk, currentUser, features, markAsDeliveredWithChannel } = useSendbirdChat();\n    const { groupChannels, next, loading } = useGroupChannelList(sdk, currentUser?.userId, {\n      queryCreator,\n      collectionCreator,\n      enableCollectionWithoutLocalCache: !queryCreator,\n    });\n\n    if (features.deliveryReceiptEnabled) {\n      useAppState('change', (status) => {\n        if (status === 'active') groupChannels.forEach(markAsDeliveredWithChannel);\n      });\n    }\n\n    const _renderGroupChannelPreview: GroupChannelListProps['List']['renderGroupChannelPreview'] = useFreshCallback(\n      (channel, onLongPressChannel) => {\n        if (renderGroupChannelPreview) return renderGroupChannelPreview(channel, onLongPressChannel);\n        return (\n          <GroupChannelPreviewContainer\n            channel={channel}\n            onPress={() => onPressChannel(channel)}\n            onLongPress={() => onLongPressChannel()}\n          />\n        );\n      },\n    );\n\n    const isChannelTypeAvailable = features.broadcastChannelEnabled || features.superGroupChannelEnabled;\n\n    return (\n      <GroupChannelListModule.Provider>\n        <GroupChannelListModule.Header />\n        <StatusComposition loading={loading} LoadingComponent={<GroupChannelListModule.StatusLoading />}>\n          <GroupChannelListModule.List\n            menuItemCreator={menuItemCreator}\n            renderGroupChannelPreview={_renderGroupChannelPreview}\n            groupChannels={groupChannels}\n            onLoadNext={next}\n            flatListProps={{\n              ListEmptyComponent: <GroupChannelListModule.StatusEmpty />,\n              contentContainerStyle: { flexGrow: 1 },\n              ...flatListProps,\n            }}\n          />\n        </StatusComposition>\n        <GroupChannelListModule.TypeSelector\n          skipTypeSelection={isChannelTypeAvailable ? skipTypeSelection : true}\n          onSelectType={onPressCreateChannel}\n        />\n      </GroupChannelListModule.Provider>\n    );\n  };\n};\n\nexport default createGroupChannelListFragment;\n"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AAMA;;;;AAEA,MAAMA,8BAA8B,GAAIC,UAAD,IAA4E;EACjH,MAAMC,sBAAsB,GAAG,IAAAC,qCAAA,EAA6BF,UAA7B,CAA/B;EACA,OAAO,QASD;IAAA,IATE;MACNG,cADM;MAENC,oBAFM;MAGNC,YAHM;MAINC,iBAJM;MAKNC,yBALM;MAMNC,iBAAiB,GAAG,KANd;MAONC,aAAa,GAAG,EAPV;MAQNC,eAAe,GAAGC;IARZ,CASF;IACJ,MAAM;MAAEC,GAAF;MAAOC,WAAP;MAAoBC,QAApB;MAA8BC;IAA9B,IAA6D,IAAAC,2BAAA,GAAnE;IACA,MAAM;MAAEC,aAAF;MAAiBC,IAAjB;MAAuBC;IAAvB,IAAmC,IAAAC,mCAAA,EAAoBR,GAApB,EAAyBC,WAAzB,aAAyBA,WAAzB,uBAAyBA,WAAW,CAAEQ,MAAtC,EAA8C;MACrFhB,YADqF;MAErFC,iBAFqF;MAGrFgB,iCAAiC,EAAE,CAACjB;IAHiD,CAA9C,CAAzC;;IAMA,IAAIS,QAAQ,CAACS,sBAAb,EAAqC;MACnC,IAAAC,uBAAA,EAAY,QAAZ,EAAuBC,MAAD,IAAY;QAChC,IAAIA,MAAM,KAAK,QAAf,EAAyBR,aAAa,CAACS,OAAd,CAAsBX,0BAAtB;MAC1B,CAFD;IAGD;;IAED,MAAMY,0BAAsF,GAAG,IAAAC,4BAAA,EAC7F,CAACC,OAAD,EAAUC,kBAAV,KAAiC;MAC/B,IAAIvB,yBAAJ,EAA+B,OAAOA,yBAAyB,CAACsB,OAAD,EAAUC,kBAAV,CAAhC;MAC/B,oBACE,6BAAC,qCAAD;QACE,OAAO,EAAED,OADX;QAEE,OAAO,EAAE,MAAM1B,cAAc,CAAC0B,OAAD,CAF/B;QAGE,WAAW,EAAE,MAAMC,kBAAkB;MAHvC,EADF;IAOD,CAV4F,CAA/F;;IAaA,MAAMC,sBAAsB,GAAGjB,QAAQ,CAACkB,uBAAT,IAAoClB,QAAQ,CAACmB,wBAA5E;IAEA,oBACE,6BAAC,sBAAD,CAAwB,QAAxB,qBACE,6BAAC,sBAAD,CAAwB,MAAxB,OADF,eAEE,6BAAC,0BAAD;MAAmB,OAAO,EAAEd,OAA5B;MAAqC,gBAAgB,eAAE,6BAAC,sBAAD,CAAwB,aAAxB;IAAvD,gBACE,6BAAC,sBAAD,CAAwB,IAAxB;MACE,eAAe,EAAET,eADnB;MAEE,yBAAyB,EAAEiB,0BAF7B;MAGE,aAAa,EAAEV,aAHjB;MAIE,UAAU,EAAEC,IAJd;MAKE,aAAa,EAAE;QACbgB,kBAAkB,eAAE,6BAAC,sBAAD,CAAwB,WAAxB,OADP;QAEbC,qBAAqB,EAAE;UAAEC,QAAQ,EAAE;QAAZ,CAFV;QAGb,GAAG3B;MAHU;IALjB,EADF,CAFF,eAeE,6BAAC,sBAAD,CAAwB,YAAxB;MACE,iBAAiB,EAAEsB,sBAAsB,GAAGvB,iBAAH,GAAuB,IADlE;MAEE,YAAY,EAAEJ;IAFhB,EAfF,CADF;EAsBD,CA5DD;AA6DD,CA/DD;;eAiEeL,8B"}