"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _uikitChatHooks = require("@sendbird/uikit-chat-hooks");

var _uikitUtils = require("@sendbird/uikit-utils");

var _MessageRenderer = _interopRequireDefault(require("../components/MessageRenderer"));

var _NewMessagesButton = _interopRequireDefault(require("../components/NewMessagesButton"));

var _ScrollToBottomButton = _interopRequireDefault(require("../components/ScrollToBottomButton"));

var _StatusComposition = _interopRequireDefault(require("../components/StatusComposition"));

var _createGroupChannelModule = _interopRequireDefault(require("../domain/groupChannel/module/createGroupChannelModule"));

var _useContext = require("../hooks/useContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const createGroupChannelFragment = initModule => {
  const GroupChannelModule = (0, _createGroupChannelModule.default)(initModule);
  return _ref => {
    let {
      renderNewMessagesButton = props => /*#__PURE__*/_react.default.createElement(_NewMessagesButton.default, props),
      renderScrollToBottomButton = props => /*#__PURE__*/_react.default.createElement(_ScrollToBottomButton.default, props),
      renderMessage,
      enableMessageGrouping = true,
      enableTypingIndicator = true,
      onPressHeaderLeft = _uikitUtils.NOOP,
      onPressHeaderRight = _uikitUtils.NOOP,
      onPressImageMessage,
      onPressMediaMessage = _uikitUtils.NOOP,
      onChannelDeleted = _uikitUtils.NOOP,
      onBeforeSendFileMessage = _uikitUtils.PASS,
      onBeforeSendUserMessage = _uikitUtils.PASS,
      channel,
      keyboardAvoidOffset,
      queryCreator,
      collectionCreator,
      sortComparator = _uikitUtils.messageComparator,
      flatListProps
    } = _ref;
    const {
      sdk,
      currentUser
    } = (0, _useContext.useSendbirdChat)();
    const {
      messages,
      nextMessages,
      newMessagesFromMembers,
      next,
      prev,
      sendFileMessage,
      sendUserMessage,
      updateFileMessage,
      updateUserMessage,
      resendMessage,
      deleteMessage,
      loading
    } = (0, _uikitChatHooks.useGroupChannelMessages)(sdk, channel, currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId, {
      collectionCreator,
      queryCreator,
      sortComparator,
      onChannelDeleted,
      enableCollectionWithoutLocalCache: !queryCreator
    });

    const _renderMessage = (0, _uikitUtils.useFreshCallback)(props => {
      if (renderMessage) return renderMessage(props);
      return /*#__PURE__*/_react.default.createElement(_MessageRenderer.default, props);
    });

    const memoizedFlatListProps = (0, _react.useMemo)(() => ({
      ListEmptyComponent: /*#__PURE__*/_react.default.createElement(GroupChannelModule.StatusEmpty, null),
      contentContainerStyle: {
        flexGrow: 1
      },
      ...flatListProps
    }), [loading, flatListProps]);
    const onSendFileMessage = (0, _uikitUtils.useFreshCallback)(async file => {
      const processedParams = await onBeforeSendFileMessage({
        file
      });
      await sendFileMessage(processedParams);
    });
    const onSendUserMessage = (0, _uikitUtils.useFreshCallback)(async (text, mention) => {
      const processedParams = await onBeforeSendUserMessage({
        message: text,
        mentionedUserIds: mention === null || mention === void 0 ? void 0 : mention.userIds,
        mentionedMessageTemplate: mention === null || mention === void 0 ? void 0 : mention.messageTemplate,
        mentionType: mention === null || mention === void 0 ? void 0 : mention.type
      });
      await sendUserMessage(processedParams);
    });
    const onUpdateFileMessage = (0, _uikitUtils.useFreshCallback)(async (editedFile, message) => {
      const processedParams = await onBeforeSendFileMessage({
        file: editedFile
      });
      await updateFileMessage(message.messageId, processedParams);
    });
    const onUpdateUserMessage = (0, _uikitUtils.useFreshCallback)(async (editedText, message, mention) => {
      const processedParams = await onBeforeSendUserMessage({
        message: editedText,
        mentionedUserIds: mention === null || mention === void 0 ? void 0 : mention.userIds,
        mentionedMessageTemplate: mention === null || mention === void 0 ? void 0 : mention.messageTemplate,
        mentionType: mention === null || mention === void 0 ? void 0 : mention.type
      });
      await updateUserMessage(message.messageId, processedParams);
    });
    return /*#__PURE__*/_react.default.createElement(GroupChannelModule.Provider, {
      channel: channel,
      enableTypingIndicator: enableTypingIndicator,
      keyboardAvoidOffset: keyboardAvoidOffset
    }, /*#__PURE__*/_react.default.createElement(GroupChannelModule.Header, {
      onPressHeaderLeft: onPressHeaderLeft,
      onPressHeaderRight: onPressHeaderRight
    }), /*#__PURE__*/_react.default.createElement(_StatusComposition.default, {
      loading: loading,
      LoadingComponent: /*#__PURE__*/_react.default.createElement(GroupChannelModule.StatusLoading, null)
    }, /*#__PURE__*/_react.default.createElement(GroupChannelModule.MessageList, {
      channel: channel,
      enableMessageGrouping: enableMessageGrouping,
      currentUserId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId,
      renderMessage: _renderMessage,
      messages: messages,
      nextMessages: nextMessages,
      newMessagesFromMembers: newMessagesFromMembers,
      onTopReached: prev,
      onBottomReached: next,
      renderNewMessagesButton: renderNewMessagesButton,
      renderScrollToBottomButton: renderScrollToBottomButton,
      onResendFailedMessage: resendMessage,
      onDeleteMessage: deleteMessage,
      onPressImageMessage: onPressImageMessage,
      onPressMediaMessage: onPressMediaMessage,
      flatListProps: memoizedFlatListProps
    }), /*#__PURE__*/_react.default.createElement(GroupChannelModule.Input, {
      SuggestedMentionList: GroupChannelModule.SuggestedMentionList,
      shouldRenderInput: shouldRenderInput(channel),
      onSendFileMessage: onSendFileMessage,
      onSendUserMessage: onSendUserMessage,
      onUpdateFileMessage: onUpdateFileMessage,
      onUpdateUserMessage: onUpdateUserMessage
    })));
  };
};

function shouldRenderInput(channel) {
  if (channel.isBroadcast) {
    return channel.myRole === 'operator';
  }

  return true;
}

var _default = createGroupChannelFragment;
exports.default = _default;
//# sourceMappingURL=createGroupChannelFragment.js.map