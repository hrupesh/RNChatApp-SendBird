{"version":3,"names":["createNativeMediaService","VideoComponent","thumbnailModule","imageResizerModule","source","resizeMode","onLoad","props","getVideoThumbnail","url","timeMills","path","createThumbnail","format","timeStamp","cacheName","hash","compressImage","uri","maxWidth","maxHeight","compressionRate","originSize","SBUUtils","getImageSize","width","height","getDownscaleSize","extension","getFileExtension","size","resizedSize","compressedURI","default","createResizedImage","Math","min","max"],"sources":["createMediaService.native.tsx"],"sourcesContent":["import type * as RNImageResizer from '@bam.tech/react-native-image-resizer';\nimport React from 'react';\nimport type * as RNCreateThumbnail from 'react-native-create-thumbnail';\nimport type RNVideo from 'react-native-video';\n\nimport { getDownscaleSize, getFileExtension, hash } from '@sendbird/uikit-utils';\n\nimport SBUUtils from '../libs/SBUUtils';\nimport type { MediaServiceInterface } from './types';\n\ntype Modules = {\n  VideoComponent: typeof RNVideo;\n  thumbnailModule: typeof RNCreateThumbnail;\n  imageResizerModule: typeof RNImageResizer;\n};\n\nconst createNativeMediaService = ({\n  VideoComponent,\n  thumbnailModule,\n  imageResizerModule,\n}: Modules): MediaServiceInterface => {\n  return {\n    VideoComponent({ source, resizeMode, onLoad, ...props }) {\n      return <VideoComponent {...props} source={source} resizeMode={resizeMode} onLoad={onLoad} controls />;\n    },\n    async getVideoThumbnail({ url, timeMills }) {\n      try {\n        const { path } = await thumbnailModule.createThumbnail({\n          url,\n          format: 'jpeg',\n          timeStamp: timeMills,\n          cacheName: hash(url),\n        });\n        return { path };\n      } catch {\n        return null;\n      }\n    },\n    async compressImage({ uri, maxWidth, maxHeight, compressionRate = 1 }) {\n      const originSize = await SBUUtils.getImageSize(uri);\n      const { width, height } = getDownscaleSize(originSize, { width: maxWidth, height: maxHeight });\n      const extension = (() => {\n        return { 'png': 'PNG', 'jpeg': 'JPEG', 'jpg': 'JPEG' }[getFileExtension(uri)] ?? 'JPEG';\n      })() as 'PNG' | 'JPEG';\n\n      const { size: resizedSize, uri: compressedURI } = await imageResizerModule.default.createResizedImage(\n        uri,\n        width,\n        height,\n        extension,\n        Math.min(Math.max(0, compressionRate), 1) * 100,\n      );\n\n      return { uri: compressedURI, size: resizedSize };\n    },\n  };\n};\n\nexport default createNativeMediaService;\n"],"mappings":";;;;;;;AACA;;AAIA;;AAEA;;;;;;AASA,MAAMA,wBAAwB,GAAG,QAIK;EAAA,IAJJ;IAChCC,cADgC;IAEhCC,eAFgC;IAGhCC;EAHgC,CAII;EACpC,OAAO;IACLF,cAAc,QAA2C;MAAA,IAA1C;QAAEG,MAAF;QAAUC,UAAV;QAAsBC,MAAtB;QAA8B,GAAGC;MAAjC,CAA0C;MACvD,oBAAO,6BAAC,cAAD,eAAoBA,KAApB;QAA2B,MAAM,EAAEH,MAAnC;QAA2C,UAAU,EAAEC,UAAvD;QAAmE,MAAM,EAAEC,MAA3E;QAAmF,QAAQ;MAA3F,GAAP;IACD,CAHI;;IAIL,MAAME,iBAAN,QAA4C;MAAA,IAApB;QAAEC,GAAF;QAAOC;MAAP,CAAoB;;MAC1C,IAAI;QACF,MAAM;UAAEC;QAAF,IAAW,MAAMT,eAAe,CAACU,eAAhB,CAAgC;UACrDH,GADqD;UAErDI,MAAM,EAAE,MAF6C;UAGrDC,SAAS,EAAEJ,SAH0C;UAIrDK,SAAS,EAAE,IAAAC,gBAAA,EAAKP,GAAL;QAJ0C,CAAhC,CAAvB;QAMA,OAAO;UAAEE;QAAF,CAAP;MACD,CARD,CAQE,MAAM;QACN,OAAO,IAAP;MACD;IACF,CAhBI;;IAiBL,MAAMM,aAAN,QAAuE;MAAA,IAAnD;QAAEC,GAAF;QAAOC,QAAP;QAAiBC,SAAjB;QAA4BC,eAAe,GAAG;MAA9C,CAAmD;MACrE,MAAMC,UAAU,GAAG,MAAMC,iBAAA,CAASC,YAAT,CAAsBN,GAAtB,CAAzB;MACA,MAAM;QAAEO,KAAF;QAASC;MAAT,IAAoB,IAAAC,4BAAA,EAAiBL,UAAjB,EAA6B;QAAEG,KAAK,EAAEN,QAAT;QAAmBO,MAAM,EAAEN;MAA3B,CAA7B,CAA1B;;MACA,MAAMQ,SAAS,GAAG,CAAC,MAAM;QACvB,OAAO;UAAE,OAAO,KAAT;UAAgB,QAAQ,MAAxB;UAAgC,OAAO;QAAvC,EAAgD,IAAAC,4BAAA,EAAiBX,GAAjB,CAAhD,KAA0E,MAAjF;MACD,CAFiB,GAAlB;;MAIA,MAAM;QAAEY,IAAI,EAAEC,WAAR;QAAqBb,GAAG,EAAEc;MAA1B,IAA4C,MAAM7B,kBAAkB,CAAC8B,OAAnB,CAA2BC,kBAA3B,CACtDhB,GADsD,EAEtDO,KAFsD,EAGtDC,MAHsD,EAItDE,SAJsD,EAKtDO,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYhB,eAAZ,CAAT,EAAuC,CAAvC,IAA4C,GALU,CAAxD;MAQA,OAAO;QAAEH,GAAG,EAAEc,aAAP;QAAsBF,IAAI,EAAEC;MAA5B,CAAP;IACD;;EAjCI,CAAP;AAmCD,CAxCD;;eA0Ce/B,wB"}