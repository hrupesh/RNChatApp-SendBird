{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type SBUError from '../libs/SBUError';\n\nexport type Unsubscribe = () => void | undefined;\nexport type DownloadedPath = string;\nexport type FilePickerResponse = FileType | null;\nexport type FileType = { uri: string; size: number; name: string; type: string };\n\n// ---------- NotificationService ---------- //\nexport interface NotificationServiceInterface {\n  hasPushPermission(): Promise<boolean>;\n  requestPushPermission(): Promise<boolean>;\n\n  getAPNSToken(): Promise<string | null>;\n  getFCMToken(): Promise<string | null>;\n  onTokenRefresh(handler: (token: string) => void): Unsubscribe;\n}\n\n// ---------- ClipboardService ---------- //\nexport interface ClipboardServiceInterface {\n  setString(text: string): void;\n  getString(): Promise<string>;\n}\n\n// ---------- FileService ---------- //\nexport interface FileServiceInterface extends FilePickerServiceInterface, FileSystemServiceInterface {}\n\nexport interface OpenResultListener {\n  onOpenFailure?: (error: SBUError, originError?: unknown) => void;\n}\nexport interface OpenMediaLibraryOptions extends OpenResultListener {\n  selectionLimit?: number;\n  mediaType?: 'photo' | 'video' | 'all';\n}\nexport interface OpenCameraOptions extends OpenResultListener {\n  cameraType?: 'front' | 'back';\n  mediaType?: 'photo' | 'video' | 'all';\n}\nexport type OpenDocumentOptions = OpenResultListener;\nexport interface SaveOptions {\n  fileUrl: string;\n  fileName: string;\n  fileType?: string | null;\n}\n\nexport interface FilePickerServiceInterface {\n  openMediaLibrary(options?: OpenMediaLibraryOptions): Promise<null | FilePickerResponse[]>;\n  openCamera(options?: OpenCameraOptions): Promise<FilePickerResponse>;\n  openDocument(options?: OpenDocumentOptions): Promise<FilePickerResponse>;\n}\n\nexport interface FileSystemServiceInterface {\n  // NOTE: On iOS, You can access the downloaded files by providing options below to info.plist\n  // - Supports opening documents in place\n  // - Application supports iTunes file sharing\n  save(options?: SaveOptions): Promise<DownloadedPath | null>;\n}\n\n// ---------- MediaService ---------- //\ninterface VideoProps {\n  source: { uri: string } | number;\n  resizeMode?: 'cover' | 'contain' | 'stretch';\n  onLoad?: () => void;\n}\ninterface GetVideoThumbnailOptions {\n  url: string;\n  timeMills?: number;\n  quality?: number;\n}\n\ninterface CompressImageOptions {\n  /**\n   * A uri of image file to compress\n   * */\n  uri: string;\n\n  /**\n   * A resize width, apply only to downscale\n   * */\n  maxWidth?: number;\n\n  /**\n   * A resize height, apply only to downscale\n   * */\n  maxHeight?: number;\n\n  /**\n   * A value in range 0.0 - 1.0 specifying compression level of the result image.\n   * 1 means highest quality and 0 the lowest quality.\n   * */\n  compressionRate?: number;\n}\n\ntype GetVideoThumbnailResult = Promise<{ path: string } | null>;\ntype CompressImageResult = Promise<{ uri: string; size: number } | null>;\n\nexport interface MediaServiceInterface {\n  VideoComponent<Props = {}>(props: VideoProps & Props): JSX.Element;\n  getVideoThumbnail(options: GetVideoThumbnailOptions): GetVideoThumbnailResult;\n  compressImage(options: CompressImageOptions): CompressImageResult;\n}\n"],"mappings":""}