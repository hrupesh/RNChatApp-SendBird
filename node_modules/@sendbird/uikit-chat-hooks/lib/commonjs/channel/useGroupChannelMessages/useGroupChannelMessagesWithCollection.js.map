{"version":3,"names":["createMessageCollection","channel","creator","filter","MessageFilter","limit","HOOK_NAME","useGroupChannelMessagesWithCollection","sdk","userId","options","forceUpdate","useForceUpdate","collectionRef","useRef","loading","refreshing","messages","nextMessages","newMessagesFromMembers","updateMessages","updateNextMessages","deleteNextMessages","deleteMessages","updateLoading","updateRefreshing","useGroupChannelMessagesReducer","sortComparator","channelMarkAsRead","source","MessageEventSource","EVENT_MESSAGE_RECEIVED","EVENT_MESSAGE_SENT_SUCCESS","SYNC_MESSAGE_FILL","undefined","confirmAndMarkAsRead","e","Logger","warn","init","useCallback","uid","callback","current","dispose","collectionCreator","currentUser","setMessageCollectionHandler","onMessagesAdded","_","__","onMessagesUpdated","nextMessageIds","map","it","messageId","nonAddedMessagesFromReceivedEvent","indexOf","onMessagesDeleted","messageIds","onChannelDeleted","onChannelUpdated","eventChannel","isGroupChannel","isDifferentChannel","onHugeGapDetected","initialize","MessageCollectionInitPolicy","CACHE_AND_REPLACE_BY_API","onCacheResult","err","isCacheEnabled","error","debug","length","pendingMessages","failedMessages","onApiResult","url","useChannelHandler","onUserBanned","bannedUser","useEffect","setTimeout","refresh","useFreshCallback","prev","hasPrevious","list","loadPrevious","next","messageCandidates","hasNext","fetchedList","loadNext","push","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","onSucceeded","sentMessage","onFailed","_failedMessage","sendFileMessage","isFileMessage","updateUserMessage","updatedMessage","updateFileMessage","resendMessage","failedMessage","resentMessage","resendUserMessage","resendFileMessage","deleteMessage","message","sendingStatus","removeFailedMessage","reqId"],"sources":["useGroupChannelMessagesWithCollection.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\n\nimport { MessageCollectionInitPolicy, MessageEventSource, MessageFilter } from '@sendbird/chat/groupChannel';\nimport type {\n  SendbirdBaseMessage,\n  SendbirdFileMessage,\n  SendbirdGroupChannel,\n  SendbirdMessageCollection,\n} from '@sendbird/uikit-utils';\nimport {\n  Logger,\n  confirmAndMarkAsRead,\n  isDifferentChannel,\n  useForceUpdate,\n  useFreshCallback,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport type { UseGroupChannelMessages, UseGroupChannelMessagesOptions } from '../../types';\nimport { useGroupChannelMessagesReducer } from './reducer';\n\nconst createMessageCollection = (\n  channel: SendbirdGroupChannel,\n  creator?: UseGroupChannelMessagesOptions['collectionCreator'],\n) => {\n  if (creator) return creator();\n  const filter = new MessageFilter();\n  return channel.createMessageCollection({ filter, limit: 100 });\n};\n\nconst HOOK_NAME = 'useGroupChannelMessagesWithCollection';\n\nexport const useGroupChannelMessagesWithCollection: UseGroupChannelMessages = (sdk, channel, userId, options) => {\n  const forceUpdate = useForceUpdate();\n  const collectionRef = useRef<SendbirdMessageCollection>();\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    nextMessages,\n    newMessagesFromMembers,\n    updateMessages,\n    updateNextMessages,\n    deleteNextMessages,\n    deleteMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useGroupChannelMessagesReducer(userId, options?.sortComparator);\n\n  const channelMarkAsRead = async (source?: MessageEventSource) => {\n    try {\n      switch (source) {\n        case MessageEventSource.EVENT_MESSAGE_RECEIVED:\n        case MessageEventSource.EVENT_MESSAGE_SENT_SUCCESS:\n        case MessageEventSource.SYNC_MESSAGE_FILL:\n        case undefined:\n          await confirmAndMarkAsRead([channel]);\n          break;\n      }\n    } catch (e) {\n      Logger.warn(`[${HOOK_NAME}/channelMarkAsRead]`, e);\n    }\n  };\n\n  const init = useCallback(\n    async (uid?: string, callback?: () => void) => {\n      if (collectionRef.current) collectionRef.current?.dispose();\n\n      if (uid) {\n        collectionRef.current = createMessageCollection(channel, options?.collectionCreator);\n        updateNextMessages([], true, sdk.currentUser.userId);\n        channelMarkAsRead();\n\n        collectionRef.current?.setMessageCollectionHandler({\n          onMessagesAdded: (_, __, messages) => {\n            channelMarkAsRead(_.source);\n            updateNextMessages(messages, false, sdk.currentUser.userId);\n          },\n          onMessagesUpdated: (_, __, messages) => {\n            channelMarkAsRead(_.source);\n\n            // NOTE: admin message is not added via onMessagesAdded handler, not checked yet is this a bug.\n            if (_.source === MessageEventSource.EVENT_MESSAGE_RECEIVED) {\n              const nextMessageIds = nextMessages.map((it) => it.messageId);\n              const nonAddedMessagesFromReceivedEvent = messages.filter(\n                (it) => nextMessageIds.indexOf(it.messageId) === -1,\n              );\n              updateNextMessages(nonAddedMessagesFromReceivedEvent, false, sdk.currentUser.userId);\n            }\n\n            // NOTE: v4 MESSAGE_RECEIVED is called twice from onMessagesAdded and onMessagesUpdated when receiving new message.\n            //  This is not intended behavior but not bugs.\n            if (_.source !== MessageEventSource.EVENT_MESSAGE_RECEIVED) {\n              updateMessages(messages, false, sdk.currentUser.userId);\n            }\n          },\n          onMessagesDeleted: (_, __, messageIds) => {\n            deleteMessages(messageIds, []);\n            deleteNextMessages(messageIds, []);\n          },\n          onChannelDeleted: () => {\n            options?.onChannelDeleted?.();\n          },\n          onChannelUpdated: (_, eventChannel) => {\n            if (eventChannel.isGroupChannel() && !isDifferentChannel(eventChannel, channel)) {\n              forceUpdate();\n            }\n          },\n          onHugeGapDetected: () => {\n            init(uid);\n          },\n        });\n\n        collectionRef.current\n          .initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API)\n          .onCacheResult((err, messages) => {\n            if (err) sdk.isCacheEnabled && Logger.error(`[${HOOK_NAME}/onCacheResult]`, err);\n            else {\n              Logger.debug(`[${HOOK_NAME}/onCacheResult]`, 'message length:', messages.length);\n\n              updateMessages(messages, true, sdk.currentUser.userId);\n              updateMessages(collectionRef.current?.pendingMessages ?? [], false, sdk.currentUser.userId);\n              updateMessages(collectionRef.current?.failedMessages ?? [], false, sdk.currentUser.userId);\n            }\n            callback?.();\n          })\n          .onApiResult((err, messages) => {\n            if (err) Logger.warn(`[${HOOK_NAME}/onApiResult]`, err);\n            else {\n              Logger.debug(`[${HOOK_NAME}/onApiResult]`, 'message length:', messages.length);\n\n              updateMessages(messages, true, sdk.currentUser.userId);\n              if (sdk.isCacheEnabled) {\n                updateMessages(collectionRef.current?.pendingMessages ?? [], false, sdk.currentUser.userId);\n                updateMessages(collectionRef.current?.failedMessages ?? [], false, sdk.currentUser.userId);\n              }\n            }\n            callback?.();\n          });\n      }\n    },\n    [sdk, channel.url, options?.collectionCreator],\n  );\n\n  useChannelHandler(sdk, HOOK_NAME, {\n    onUserBanned(channel, bannedUser) {\n      if (channel.isGroupChannel() && !isDifferentChannel(channel, channel)) {\n        if (bannedUser.userId === sdk.currentUser.userId) {\n          options?.onChannelDeleted?.();\n        } else {\n          forceUpdate();\n        }\n      }\n    },\n  });\n\n  useEffect(() => {\n    // NOTE: Cache read is heavy task, and it prevents smooth ui transition\n    setTimeout(async () => {\n      updateLoading(true);\n      init(userId, () => updateLoading(false));\n    }, 0);\n  }, [init, userId]);\n\n  useEffect(() => {\n    return () => {\n      if (collectionRef.current) collectionRef.current?.dispose();\n    };\n  }, []);\n\n  const refresh: ReturnType<UseGroupChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    init(userId, () => updateRefreshing(false));\n  });\n\n  const prev: ReturnType<UseGroupChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (collectionRef.current && collectionRef.current?.hasPrevious) {\n      try {\n        const list = await collectionRef.current?.loadPrevious();\n        updateMessages(list, false, sdk.currentUser.userId);\n      } catch {}\n    }\n  });\n\n  const next: ReturnType<UseGroupChannelMessages>['next'] = useFreshCallback(async () => {\n    const messageCandidates: SendbirdBaseMessage[] = [];\n\n    if (collectionRef.current && collectionRef.current?.hasNext) {\n      try {\n        const fetchedList = await collectionRef.current?.loadNext();\n        messageCandidates.push(...fetchedList);\n      } catch {}\n    }\n\n    if (nextMessages.length > 0) {\n      messageCandidates.push(...nextMessages);\n    }\n\n    if (messageCandidates.length > 0) {\n      updateMessages(messageCandidates, false, sdk.currentUser.userId);\n      updateNextMessages([], true, sdk.currentUser.userId);\n    }\n  });\n\n  const sendUserMessage: ReturnType<UseGroupChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              onPending?.(pendingMessage);\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, _failedMessage) => {\n            // updateMessages([failedMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n  const sendFileMessage: ReturnType<UseGroupChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage as SendbirdFileMessage);\n            }\n          })\n          .onFailed((err, _failedMessage) => {\n            // updateMessages([failedMessage], false, sdk.currentUser.userId);\n            reject(err);\n          });\n      });\n    },\n  );\n  const updateUserMessage: ReturnType<UseGroupChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseGroupChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseGroupChannelMessages>['resendMessage'] = useFreshCallback(\n    async (failedMessage) => {\n      const resentMessage = await (() => {\n        if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n        if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n        return null;\n      })();\n\n      if (resentMessage) updateMessages([resentMessage], false, sdk.currentUser.userId);\n    },\n  );\n  const deleteMessage: ReturnType<UseGroupChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      try {\n        await collectionRef.current?.removeFailedMessage(message.reqId);\n      } finally {\n        deleteMessages([message.messageId], [message.reqId]);\n      }\n    }\n  });\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    nextMessages,\n    newMessagesFromMembers,\n    next,\n    prev,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n  };\n};\n"],"mappings":"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"}