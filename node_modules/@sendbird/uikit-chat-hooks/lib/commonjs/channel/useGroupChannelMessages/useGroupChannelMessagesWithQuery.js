"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGroupChannelMessagesWithQuery = void 0;

var _react = require("react");

var _uikitUtils = require("@sendbird/uikit-utils");

var _useChannelHandler = require("../../handler/useChannelHandler");

var _reducer = require("./reducer");

const createMessageQuery = (channel, creator) => {
  if (creator) return creator();
  return channel.createPreviousMessageListQuery({
    limit: 100,
    reverse: true
  });
};

const HOOK_NAME = 'useGroupChannelMessagesWithQuery';

const useGroupChannelMessagesWithQuery = (sdk, channel, userId, options) => {
  const queryRef = (0, _react.useRef)();
  const forceUpdate = (0, _uikitUtils.useForceUpdate)();
  const {
    loading,
    refreshing,
    messages,
    nextMessages,
    newMessagesFromMembers,
    updateMessages,
    updateNextMessages,
    deleteNextMessages,
    deleteMessages,
    updateLoading,
    updateRefreshing
  } = (0, _reducer.useGroupChannelMessagesReducer)(userId, options === null || options === void 0 ? void 0 : options.sortComparator);

  const channelMarkAsRead = async () => {
    try {
      await (0, _uikitUtils.confirmAndMarkAsRead)([channel]);
    } catch (e) {
      _uikitUtils.Logger.warn(`[${HOOK_NAME}/channelMarkAsRead]`, e);
    }
  };

  const init = (0, _react.useCallback)(async uid => {
    if (uid) {
      var _queryRef$current;

      queryRef.current = createMessageQuery(channel, options === null || options === void 0 ? void 0 : options.queryCreator);
      channelMarkAsRead().catch();

      if ((_queryRef$current = queryRef.current) !== null && _queryRef$current !== void 0 && _queryRef$current.hasNext) {
        var _queryRef$current2;

        const list = await ((_queryRef$current2 = queryRef.current) === null || _queryRef$current2 === void 0 ? void 0 : _queryRef$current2.load());
        updateMessages(list, true, sdk.currentUser.userId);
      }

      updateNextMessages([], true, sdk.currentUser.userId);
    }
  }, [sdk, channel.url, options === null || options === void 0 ? void 0 : options.queryCreator]);

  const channelUpdater = channel => {
    if (channel.isGroupChannel() && !(0, _uikitUtils.isDifferentChannel)(channel, channel)) {
      forceUpdate();
    }
  };

  (0, _useChannelHandler.useChannelHandler)(sdk, HOOK_NAME, {
    // Messages
    onMessageReceived(eventChannel, message) {
      if ((0, _uikitUtils.isDifferentChannel)(channel, eventChannel)) return;
      channelMarkAsRead();
      updateNextMessages([message], false, sdk.currentUser.userId);
    },

    onMessageUpdated(eventChannel, message) {
      if ((0, _uikitUtils.isDifferentChannel)(channel, eventChannel)) return;
      updateMessages([message], false, sdk.currentUser.userId);
    },

    onMessageDeleted(eventChannel, messageId) {
      if ((0, _uikitUtils.isDifferentChannel)(channel, eventChannel)) return;
      deleteMessages([messageId], []);
      deleteNextMessages([messageId], []);
    },

    // Channels
    onChannelChanged: channelUpdater,
    onChannelFrozen: channelUpdater,
    onChannelUnfrozen: channelUpdater,
    onChannelHidden: channelUpdater,

    onChannelMemberCountChanged(channels) {
      const foundChannel = channels.find(c => !(0, _uikitUtils.isDifferentChannel)(c, channel));
      if (foundChannel) channelUpdater(foundChannel);
    },

    onChannelDeleted(channelUrl) {
      var _options$onChannelDel;

      if (channel.url === channelUrl) options === null || options === void 0 ? void 0 : (_options$onChannelDel = options.onChannelDeleted) === null || _options$onChannelDel === void 0 ? void 0 : _options$onChannelDel.call(options);
    },

    // Users
    onOperatorUpdated: channelUpdater,
    onUserLeft: channelUpdater,
    // onUserEntered: channelUpdater,
    // onUserExited: channelUpdater,
    onUserJoined: channelUpdater,
    onUserUnbanned: channelUpdater,
    onUserMuted: channelUpdater,
    onUserUnmuted: channelUpdater,

    onUserBanned(eventChannel, bannedUser) {
      if ((0, _uikitUtils.isDifferentChannel)(channel, eventChannel)) return;

      if (bannedUser.userId === sdk.currentUser.userId) {
        var _options$onChannelDel2;

        options === null || options === void 0 ? void 0 : (_options$onChannelDel2 = options.onChannelDeleted) === null || _options$onChannelDel2 === void 0 ? void 0 : _options$onChannelDel2.call(options);
      } else {
        channelUpdater(eventChannel);
      }
    }

  });
  (0, _uikitUtils.useAsyncEffect)(async () => {
    updateLoading(true);
    await init(userId);
    updateLoading(false);
  }, [init, userId]);
  const refresh = (0, _react.useCallback)(async () => {
    updateRefreshing(true);
    await init(userId);
    updateRefreshing(false);
  }, [init, userId]);
  const prev = (0, _react.useCallback)(async () => {
    var _queryRef$current3;

    if (queryRef.current && (_queryRef$current3 = queryRef.current) !== null && _queryRef$current3 !== void 0 && _queryRef$current3.hasNext) {
      var _queryRef$current4;

      const list = await ((_queryRef$current4 = queryRef.current) === null || _queryRef$current4 === void 0 ? void 0 : _queryRef$current4.load());
      updateMessages(list, false, sdk.currentUser.userId);
    }
  }, []);
  const next = (0, _react.useCallback)(async () => {
    if (nextMessages.length > 0) {
      updateMessages(nextMessages, false, sdk.currentUser.userId);
      updateNextMessages([], true, sdk.currentUser.userId);
    }
  }, [nextMessages.length]);
  const sendUserMessage = (0, _react.useCallback)((params, onPending) => {
    return new Promise((resolve, reject) => {
      channel.sendUserMessage(params).onPending(pendingMessage => {
        if (pendingMessage.isUserMessage()) {
          updateNextMessages([pendingMessage], false, sdk.currentUser.userId);
          onPending === null || onPending === void 0 ? void 0 : onPending(pendingMessage);
        }
      }).onSucceeded(sentMessage => {
        if (sentMessage.isUserMessage()) {
          updateNextMessages([sentMessage], false, sdk.currentUser.userId);
          resolve(sentMessage);
        }
      }).onFailed(err => {
        reject(err);
      });
    });
  }, [channel]);
  const sendFileMessage = (0, _react.useCallback)((params, onPending) => {
    return new Promise((resolve, reject) => {
      channel.sendFileMessage(params).onPending(pendingMessage => {
        if (pendingMessage.isFileMessage()) {
          updateNextMessages([pendingMessage], false, sdk.currentUser.userId);
          onPending === null || onPending === void 0 ? void 0 : onPending(pendingMessage);
        }
      }).onSucceeded(sentMessage => {
        if (sentMessage.isFileMessage()) {
          updateNextMessages([sentMessage], false, sdk.currentUser.userId);
          resolve(sentMessage);
        }
      }).onFailed(err => {
        reject(err);
      });
    });
  }, [channel]);
  const updateUserMessage = (0, _react.useCallback)(async (messageId, params) => {
    const updatedMessage = await channel.updateUserMessage(messageId, params);
    updateMessages([updatedMessage], false, sdk.currentUser.userId);
    return updatedMessage;
  }, [channel]);
  const updateFileMessage = (0, _react.useCallback)(async (messageId, params) => {
    const updatedMessage = await channel.updateFileMessage(messageId, params);
    updateMessages([updatedMessage], false, sdk.currentUser.userId);
    return updatedMessage;
  }, [channel]);
  const resendMessage = (0, _react.useCallback)(async failedMessage => {
    const message = await (() => {
      if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);
      if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);
      return null;
    })();
    if (message) updateNextMessages([message], false, sdk.currentUser.userId);
  }, [channel]);
  const deleteMessage = (0, _react.useCallback)(async message => {
    if (message.sendingStatus === 'succeeded') {
      if (message.isUserMessage()) await channel.deleteMessage(message);
      if (message.isFileMessage()) await channel.deleteMessage(message);
    } else {
      deleteMessages([message.messageId], [message.reqId]);
    }
  }, [channel]);
  return {
    loading,
    refreshing,
    refresh,
    messages,
    nextMessages,
    newMessagesFromMembers,
    next,
    prev,
    sendUserMessage,
    sendFileMessage,
    updateUserMessage,
    updateFileMessage,
    resendMessage,
    deleteMessage
  };
};

exports.useGroupChannelMessagesWithQuery = useGroupChannelMessagesWithQuery;
//# sourceMappingURL=useGroupChannelMessagesWithQuery.js.map