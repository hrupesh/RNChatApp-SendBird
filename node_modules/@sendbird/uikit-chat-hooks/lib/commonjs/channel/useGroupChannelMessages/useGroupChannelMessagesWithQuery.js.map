{"version":3,"names":["createMessageQuery","channel","creator","createPreviousMessageListQuery","limit","reverse","HOOK_NAME","useGroupChannelMessagesWithQuery","sdk","userId","options","queryRef","useRef","forceUpdate","useForceUpdate","loading","refreshing","messages","nextMessages","newMessagesFromMembers","updateMessages","updateNextMessages","deleteNextMessages","deleteMessages","updateLoading","updateRefreshing","useGroupChannelMessagesReducer","sortComparator","channelMarkAsRead","confirmAndMarkAsRead","e","Logger","warn","init","useCallback","uid","current","queryCreator","catch","hasNext","list","load","currentUser","url","channelUpdater","isGroupChannel","isDifferentChannel","useChannelHandler","onMessageReceived","eventChannel","message","onMessageUpdated","onMessageDeleted","messageId","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onChannelHidden","onChannelMemberCountChanged","channels","foundChannel","find","c","onChannelDeleted","channelUrl","onOperatorUpdated","onUserLeft","onUserJoined","onUserUnbanned","onUserMuted","onUserUnmuted","onUserBanned","bannedUser","useAsyncEffect","refresh","prev","next","length","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","onSucceeded","sentMessage","onFailed","err","sendFileMessage","isFileMessage","updateUserMessage","updatedMessage","updateFileMessage","resendMessage","failedMessage","resendUserMessage","resendFileMessage","deleteMessage","sendingStatus","reqId"],"sources":["useGroupChannelMessagesWithQuery.ts"],"sourcesContent":["import { useCallback, useRef } from 'react';\n\nimport type {\n  SendbirdBaseChannel,\n  SendbirdGroupChannel,\n  SendbirdPreviousMessageListQuery,\n} from '@sendbird/uikit-utils';\nimport {\n  Logger,\n  confirmAndMarkAsRead,\n  isDifferentChannel,\n  useAsyncEffect,\n  useForceUpdate,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport type { UseGroupChannelMessages, UseGroupChannelMessagesOptions } from '../../types';\nimport { useGroupChannelMessagesReducer } from './reducer';\n\nconst createMessageQuery = (\n  channel: SendbirdGroupChannel,\n  creator?: UseGroupChannelMessagesOptions['queryCreator'],\n) => {\n  if (creator) return creator();\n  return channel.createPreviousMessageListQuery({\n    limit: 100,\n    reverse: true,\n  });\n};\n\nconst HOOK_NAME = 'useGroupChannelMessagesWithQuery';\nexport const useGroupChannelMessagesWithQuery: UseGroupChannelMessages = (sdk, channel, userId, options) => {\n  const queryRef = useRef<SendbirdPreviousMessageListQuery>();\n\n  const forceUpdate = useForceUpdate();\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    nextMessages,\n    newMessagesFromMembers,\n    updateMessages,\n    updateNextMessages,\n    deleteNextMessages,\n    deleteMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useGroupChannelMessagesReducer(userId, options?.sortComparator);\n\n  const channelMarkAsRead = async () => {\n    try {\n      await confirmAndMarkAsRead([channel]);\n    } catch (e) {\n      Logger.warn(`[${HOOK_NAME}/channelMarkAsRead]`, e);\n    }\n  };\n\n  const init = useCallback(\n    async (uid?: string) => {\n      if (uid) {\n        queryRef.current = createMessageQuery(channel, options?.queryCreator);\n        channelMarkAsRead().catch();\n        if (queryRef.current?.hasNext) {\n          const list = await queryRef.current?.load();\n          updateMessages(list, true, sdk.currentUser.userId);\n        }\n        updateNextMessages([], true, sdk.currentUser.userId);\n      }\n    },\n    [sdk, channel.url, options?.queryCreator],\n  );\n\n  const channelUpdater = (channel: SendbirdBaseChannel) => {\n    if (channel.isGroupChannel() && !isDifferentChannel(channel, channel)) {\n      forceUpdate();\n    }\n  };\n\n  useChannelHandler(sdk, HOOK_NAME, {\n    // Messages\n    onMessageReceived(eventChannel, message) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      channelMarkAsRead();\n      updateNextMessages([message], false, sdk.currentUser.userId);\n    },\n    onMessageUpdated(eventChannel, message) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      updateMessages([message], false, sdk.currentUser.userId);\n    },\n    onMessageDeleted(eventChannel, messageId) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      deleteMessages([messageId], []);\n      deleteNextMessages([messageId], []);\n    },\n    // Channels\n    onChannelChanged: channelUpdater,\n    onChannelFrozen: channelUpdater,\n    onChannelUnfrozen: channelUpdater,\n    onChannelHidden: channelUpdater,\n    onChannelMemberCountChanged(channels) {\n      const foundChannel = channels.find((c) => !isDifferentChannel(c, channel));\n      if (foundChannel) channelUpdater(foundChannel);\n    },\n    onChannelDeleted(channelUrl: string) {\n      if (channel.url === channelUrl) options?.onChannelDeleted?.();\n    },\n    // Users\n    onOperatorUpdated: channelUpdater,\n    onUserLeft: channelUpdater,\n    // onUserEntered: channelUpdater,\n    // onUserExited: channelUpdater,\n    onUserJoined: channelUpdater,\n    onUserUnbanned: channelUpdater,\n    onUserMuted: channelUpdater,\n    onUserUnmuted: channelUpdater,\n    onUserBanned(eventChannel, bannedUser) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n\n      if (bannedUser.userId === sdk.currentUser.userId) {\n        options?.onChannelDeleted?.();\n      } else {\n        channelUpdater(eventChannel);\n      }\n    },\n  });\n\n  useAsyncEffect(async () => {\n    updateLoading(true);\n    await init(userId);\n    updateLoading(false);\n  }, [init, userId]);\n\n  const refresh: ReturnType<UseGroupChannelMessages>['refresh'] = useCallback(async () => {\n    updateRefreshing(true);\n    await init(userId);\n    updateRefreshing(false);\n  }, [init, userId]);\n\n  const prev: ReturnType<UseGroupChannelMessages>['prev'] = useCallback(async () => {\n    if (queryRef.current && queryRef.current?.hasNext) {\n      const list = await queryRef.current?.load();\n      updateMessages(list, false, sdk.currentUser.userId);\n    }\n  }, []);\n\n  const next: ReturnType<UseGroupChannelMessages>['next'] = useCallback(async () => {\n    if (nextMessages.length > 0) {\n      updateMessages(nextMessages, false, sdk.currentUser.userId);\n      updateNextMessages([], true, sdk.currentUser.userId);\n    }\n  }, [nextMessages.length]);\n\n  const sendUserMessage: ReturnType<UseGroupChannelMessages>['sendUserMessage'] = useCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              updateNextMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateNextMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err) => {\n            reject(err);\n          });\n      });\n    },\n    [channel],\n  );\n  const sendFileMessage: ReturnType<UseGroupChannelMessages>['sendFileMessage'] = useCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateNextMessages([pendingMessage], false, sdk.currentUser.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateNextMessages([sentMessage], false, sdk.currentUser.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err) => {\n            reject(err);\n          });\n      });\n    },\n    [channel],\n  );\n  const updateUserMessage: ReturnType<UseGroupChannelMessages>['updateUserMessage'] = useCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n    [channel],\n  );\n  const updateFileMessage: ReturnType<UseGroupChannelMessages>['updateFileMessage'] = useCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser.userId);\n      return updatedMessage;\n    },\n    [channel],\n  );\n  const resendMessage: ReturnType<UseGroupChannelMessages>['resendMessage'] = useCallback(\n    async (failedMessage) => {\n      const message = await (() => {\n        if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n        if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n        return null;\n      })();\n\n      if (message) updateNextMessages([message], false, sdk.currentUser.userId);\n    },\n    [channel],\n  );\n  const deleteMessage: ReturnType<UseGroupChannelMessages>['deleteMessage'] = useCallback(\n    async (message) => {\n      if (message.sendingStatus === 'succeeded') {\n        if (message.isUserMessage()) await channel.deleteMessage(message);\n        if (message.isFileMessage()) await channel.deleteMessage(message);\n      } else {\n        deleteMessages([message.messageId], [message.reqId]);\n      }\n    },\n    [channel],\n  );\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    nextMessages,\n    newMessagesFromMembers,\n    next,\n    prev,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n  };\n};\n"],"mappings":"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"}