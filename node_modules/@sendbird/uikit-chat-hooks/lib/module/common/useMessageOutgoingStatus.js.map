{"version":3,"names":["isDifferentChannel","isMyMessage","useForceUpdate","useUniqId","useChannelHandler","useAppFeatures","HOOK_NAME","useMessageOutgoingStatus","sdk","channel","message","features","forceUpdate","currentUser","uniqId","onUndeliveredMemberStatusUpdated","eventChannel","userId","onUnreadMemberStatusUpdated","sendingStatus","isBroadcast","isSuper","getUnreadMemberCount","deliveryReceiptEnabled","getUndeliveredMemberCount"],"sources":["useMessageOutgoingStatus.ts"],"sourcesContent":["import type { SendbirdChatSDK, SendbirdGroupChannel, SendbirdMessage } from '@sendbird/uikit-utils';\nimport { isDifferentChannel, isMyMessage, useForceUpdate, useUniqId } from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../handler/useChannelHandler';\nimport { useAppFeatures } from './useAppFeatures';\n\nconst HOOK_NAME = 'useMessageOutgoingStatus';\n\nexport type SBUOutgoingStatus = 'NONE' | 'PENDING' | 'FAILED' | 'UNDELIVERED' | 'DELIVERED' | 'UNREAD' | 'READ';\n\nexport const useMessageOutgoingStatus = (\n  sdk: SendbirdChatSDK,\n  channel: SendbirdGroupChannel,\n  message?: SendbirdMessage | null,\n): SBUOutgoingStatus => {\n  const features = useAppFeatures(sdk);\n  const forceUpdate = useForceUpdate();\n  const currentUser = sdk.currentUser;\n\n  const uniqId = useUniqId(HOOK_NAME);\n  useChannelHandler(sdk, `${HOOK_NAME}_${uniqId}`, {\n    onUndeliveredMemberStatusUpdated(eventChannel) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (!isMyMessage(message, currentUser?.userId)) return;\n\n      forceUpdate();\n    },\n    onUnreadMemberStatusUpdated(eventChannel) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (!isMyMessage(message, currentUser?.userId)) return;\n\n      forceUpdate();\n    },\n  });\n\n  if (!message) return 'NONE';\n\n  if ('sendingStatus' in message) {\n    if (message.sendingStatus === 'pending') return 'PENDING';\n    if (message.sendingStatus === 'failed') return 'FAILED';\n  }\n\n  if (channel.isBroadcast || channel.isSuper) return 'NONE';\n\n  if (channel.getUnreadMemberCount(message) === 0) return 'READ';\n\n  if (features.deliveryReceiptEnabled) {\n    if (channel.getUndeliveredMemberCount(message) === 0) return 'DELIVERED';\n    return 'UNDELIVERED';\n  }\n\n  return 'UNREAD';\n};\n"],"mappings":"AACA,SAASA,kBAAT,EAA6BC,WAA7B,EAA0CC,cAA1C,EAA0DC,SAA1D,QAA2E,uBAA3E;AAEA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,MAAMC,SAAS,GAAG,0BAAlB;AAIA,OAAO,MAAMC,wBAAwB,GAAG,CACtCC,GADsC,EAEtCC,OAFsC,EAGtCC,OAHsC,KAIhB;EACtB,MAAMC,QAAQ,GAAGN,cAAc,CAACG,GAAD,CAA/B;EACA,MAAMI,WAAW,GAAGV,cAAc,EAAlC;EACA,MAAMW,WAAW,GAAGL,GAAG,CAACK,WAAxB;EAEA,MAAMC,MAAM,GAAGX,SAAS,CAACG,SAAD,CAAxB;EACAF,iBAAiB,CAACI,GAAD,EAAO,GAAEF,SAAU,IAAGQ,MAAO,EAA7B,EAAgC;IAC/CC,gCAAgC,CAACC,YAAD,EAAe;MAC7C,IAAIhB,kBAAkB,CAACS,OAAD,EAAUO,YAAV,CAAtB,EAA+C;MAC/C,IAAI,CAACf,WAAW,CAACS,OAAD,EAAUG,WAAV,aAAUA,WAAV,uBAAUA,WAAW,CAAEI,MAAvB,CAAhB,EAAgD;MAEhDL,WAAW;IACZ,CAN8C;;IAO/CM,2BAA2B,CAACF,YAAD,EAAe;MACxC,IAAIhB,kBAAkB,CAACS,OAAD,EAAUO,YAAV,CAAtB,EAA+C;MAC/C,IAAI,CAACf,WAAW,CAACS,OAAD,EAAUG,WAAV,aAAUA,WAAV,uBAAUA,WAAW,CAAEI,MAAvB,CAAhB,EAAgD;MAEhDL,WAAW;IACZ;;EAZ8C,CAAhC,CAAjB;EAeA,IAAI,CAACF,OAAL,EAAc,OAAO,MAAP;;EAEd,IAAI,mBAAmBA,OAAvB,EAAgC;IAC9B,IAAIA,OAAO,CAACS,aAAR,KAA0B,SAA9B,EAAyC,OAAO,SAAP;IACzC,IAAIT,OAAO,CAACS,aAAR,KAA0B,QAA9B,EAAwC,OAAO,QAAP;EACzC;;EAED,IAAIV,OAAO,CAACW,WAAR,IAAuBX,OAAO,CAACY,OAAnC,EAA4C,OAAO,MAAP;EAE5C,IAAIZ,OAAO,CAACa,oBAAR,CAA6BZ,OAA7B,MAA0C,CAA9C,EAAiD,OAAO,MAAP;;EAEjD,IAAIC,QAAQ,CAACY,sBAAb,EAAqC;IACnC,IAAId,OAAO,CAACe,yBAAR,CAAkCd,OAAlC,MAA+C,CAAnD,EAAsD,OAAO,WAAP;IACtD,OAAO,aAAP;EACD;;EAED,OAAO,QAAP;AACD,CA1CM"}